<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Dojo MX Blog</title><link>https://blog.thedojo.mx/</link><description>Recent content on The Dojo MX Blog</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Tue, 19 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.thedojo.mx/index.xml" rel="self" type="application/rss+xml"/><item><title>Zig: un lenguaje que quiere reemplazar al poderoso C</title><link>https://blog.thedojo.mx/2025/08/19/zig-un-lenguaje-que-quiere-reemplazar-al-poderoso-c/</link><pubDate>Tue, 19 Aug 2025 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2025/08/19/zig-un-lenguaje-que-quiere-reemplazar-al-poderoso-c/</guid><description>Recientemente hemos visto una ola de lenguajes listos para destronar a los lenguajes de programación que forman la base de casi toda nuestra computación actual: C y C++. Lenguajes como Rust y Go quieren reemplazarlos, pero tenemos a otro competidor que apunta directamente hacia C y parece que se está acercando aunque no tiene todavía una versión completamente estable.
En este artículo vamos a hablar de las características de Zig y cómo es que planea reemplazar a C.</description></item><item><title>¿Qué son los agentes inteligentes?</title><link>https://blog.thedojo.mx/2025/05/16/qu%C3%A9-son-los-agentes-inteligentes/</link><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2025/05/16/qu%C3%A9-son-los-agentes-inteligentes/</guid><description>Con la llegada de los LLM&amp;rsquo;s, el término &amp;ldquo;agente&amp;rdquo; empezó a ganar más popularidad y lo oímos por todos lados. En este artículo vamos a hablar de qué son, para entenderlo lo mejor posible y no dejarnos llevar por el hype.
¿Qué es un agente? Este es un concepto que ha sido muy difícil de definir y por muchaos lados encuentras definiciones diferentes. En ester artículo vamos a dar una definicón sencilla y que nos parece práctica y que captura la idea principal de toda esta ola de crear programas que puedan comportarse como agentes.</description></item><item><title>Debes leer 'Thinking in Systems'</title><link>https://blog.thedojo.mx/2025/05/15/debes-leer-thinking-in-systems/</link><pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2025/05/15/debes-leer-thinking-in-systems/</guid><description>El libro &amp;ldquo;Thinking in Systems&amp;rdquo; de Donella Hager Meadows es un libro muy importante para cualquier desarrollador de software. ¿Por qué? Los desarrolladores nos dedicamos a hacer sistemas, y este es justo el tema principal del libro, escrito por una experta en sistemas complejos.
Veamos por qué puede ser una buena lectura para ti y por que te recomiendo leerlo lo antes posible.
A cerca de Thinking in Systems Thinking in systems es un libro un poco antiguo, publicado hace casi 17 años, en 2008, después del fallecimiento de su autora.</description></item><item><title>Bases de datos para LLM's</title><link>https://blog.thedojo.mx/2025/05/10/bases-de-datos-para-llms/</link><pubDate>Sat, 10 May 2025 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2025/05/10/bases-de-datos-para-llms/</guid><description>Los LLM&amp;rsquo;s llegaron para cambiar la forma en la que usamos la computadora. Pero sus limitaciones y casos de uso que nos abren, requieren que los utilicemos en conjunto con otras tecnologías y nuevas arquitecturas, para hacer software confiable, útil y que cumpla con lo que el usuario necesita.
Una parte importante es la fuente de información, ya que no podemos confiar en ellos como fuentes de información exactas. ¿En qué tipos de bases de datos podemos guardar información para crear programas en combinación con los modelos generativos que sirvan lo mejor posible?</description></item><item><title>El arte genérico: una historia de la metaprogramación en C++</title><link>https://blog.thedojo.mx/2025/04/17/el-arte-gen%C3%A9rico-una-historia-de-la-metaprogramaci%C3%B3n-en-c-/</link><pubDate>Thu, 17 Apr 2025 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2025/04/17/el-arte-gen%C3%A9rico-una-historia-de-la-metaprogramaci%C3%B3n-en-c-/</guid><description>Hablar de metaprogramación en C++ suele generar cierto rechazo, y no sin razón: dominar el lenguaje ya representa un reto considerable, y sumarle la complejidad de los teamplates puede parecer excesivo. A diferencia de otros lenguajes con mecanismos más flexibles o integrados, C++ exige un conocimiento profundo no solo del lenguaje, sino también del compilador y su comportamiento. Comprender cómo interactúan las plantillas, como se resuelven los tipos, como se gestionan las sobrecargas o se aplican las optimizaciones es esencial para escribir código genérico eficaz, lo que convierte esta práctica en un desafío tanto técnico como mental.</description></item><item><title>Reseña del libro 'Deep Learning' de MIT Press Essential Knowledge Series</title><link>https://blog.thedojo.mx/2025/02/23/rese%C3%B1a-del-libro-deep-learning-de-mit-press-essential-knowledge-series/</link><pubDate>Sun, 23 Feb 2025 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2025/02/23/rese%C3%B1a-del-libro-deep-learning-de-mit-press-essential-knowledge-series/</guid><description>La serie The MIT Press Essential Knowledge Series es una serie de libros de introducción a diferentes temas interesantes y actuales, sobre todo de ciencia y tecnología.
Me gustan mucho porque son lo suficientemente introductorios para que cualquiera sin conocimiento previo del tema específico pueda introducirse, pero lo suficientemente completos para salir con una buena visión general de ese tema específico.
El libro del que quiero hablar es de un tema que se ha vuelto cada vez más importante, el Deep Learning.</description></item><item><title>Un concepto importante: los buffers</title><link>https://blog.thedojo.mx/2024/12/30/un-concepto-importante-los-buffers/</link><pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2024/12/30/un-concepto-importante-los-buffers/</guid><description>El concepto de buffer es usado por todos lados en el desarrollo de software, pero siento que es un concepto poco entendido. En este artículo vamos a hablar de qué son los buffers, para qué se usan y cómo pueden ayudarte a resolver problemas y diseñar mejor software.
¿Qué es un buffer? Primero hablemos de dónde viene la idea de los buffers. Un buffer es un concepto importante en teoría de sistemas.</description></item><item><title>¿Qué son los requerimientos funcionales?</title><link>https://blog.thedojo.mx/2024/11/23/qu%C3%A9-son-los-requerimientos-funcionales/</link><pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2024/11/23/qu%C3%A9-son-los-requerimientos-funcionales/</guid><description>&amp;ldquo;Requerimientos funcionales&amp;rdquo; es una expresión muy rebuscada para un concepto muy sencillo relacionado con el diseño de los sistemas de software: las cosas que tu sistema HACE.
En este artículo hablaremos de formas de encontrarlos, definirlos, documentarlos y tenerlos listos para la siguiente etapa del desarrollo de software.
Cómo definir las funciones de un sistemas La primera tarea como arquitecto de software tiene que ver con la de entender completamente lo que el software tiene que HACER.</description></item><item><title>¿Qué es la programación asíncrona?</title><link>https://blog.thedojo.mx/2024/10/31/qu%C3%A9-es-la-programaci%C3%B3n-as%C3%ADncrona/</link><pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2024/10/31/qu%C3%A9-es-la-programaci%C3%B3n-as%C3%ADncrona/</guid><description>La programación asíncrona es uno de los primeros temas avanzados que encontrarás al programar, especialmente si desarrollas aplicaciones web. Esto es aún más común si haces JavaScript, que es un lenguaje que se usa en entornos de ejecución asíncronos.
En este artículo la explicaremos para que puedas programar de manera asíncrona con seguridad.
¿Por qué existe? - El caso de la programación asíncrona Imagínate un proceso de la vida real en el que tengas una conjunto de recursos limitados, que sean completamente necesarios para terminar el trabajo.</description></item><item><title>¿Qué es la búsqueda binaria?</title><link>https://blog.thedojo.mx/2024/10/26/qu%C3%A9-es-la-b%C3%BAsqueda-binaria/</link><pubDate>Sat, 26 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2024/10/26/qu%C3%A9-es-la-b%C3%BAsqueda-binaria/</guid><description>Uno de los algoritmos más fáciles de entender, que incluso sin preparación aplicamos en la vida real y que se enseña en las primeras clases de programación es la búsqueda binaria. Vamos a hablar de este algoritmo y su relación profunda con las ciencias de la computación y la información en general.
Búsqueda binaria en la vida real ¿Alguna ves has jugado &amp;ldquo;Adivina Quién&amp;rdquo;? Es un juego de mesa en el que cada jugador tiene un tablero con un conjunto de personajes con características físicas distintas, como el color de pelo, diferentes accesorios, y otros rasgos distintivos.</description></item><item><title>Desarrolladores que deberías admirar: Martin Kleppmann</title><link>https://blog.thedojo.mx/2024/10/20/desarrolladores-que-deber%C3%ADas-admirar-martin-kleppmann/</link><pubDate>Sun, 20 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2024/10/20/desarrolladores-que-deber%C3%ADas-admirar-martin-kleppmann/</guid><description>Martin Kleppmann es un desarrollador de software, investigador y profesor muy prolífico. Hablemos de su trabajo, ideas y de por qué es alguien que podrías admirar.
Su carrera Martin ha desarrollado su carrera e investigación alrededor del software deTambién trabaja en seguridad de sistemas distribuidos, un tema relacionado al anterior, pero digamos que para temas de mayor escala.
Es profesor en la Universidad de Cambridge, pero parece que nunca se ha separado de la industria, por ejemplo, como emprendedor, fundó Rapportive: una empresa que creó un plug-in que te permitía ver los detalles de tus contactos directamente en tu bandeja de entrada de email.</description></item><item><title>Los diferentes grados de diseño de software</title><link>https://blog.thedojo.mx/2024/10/19/los-diferentes-grados-de-dise%C3%B1o-de-software/</link><pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2024/10/19/los-diferentes-grados-de-dise%C3%B1o-de-software/</guid><description>Hay una confusión enorme sobre el diseño de software. Cuando se habla de arquitectura, se empieza a hablar de patrones de diseño, infraestructura, y otras cosas con las que no nos conviene meternos en ese nivel.
Es por eso que en este artículo vamos a proponer una taxonomía para los diferentes grados de diseño de software. Pero antes hablemos de por qué te conviene hacer una distinción clara.
Por qué te conviene distinguir los grados de diseño de software Lo primero que debemos entender es que hacer software implica diseñar software.</description></item><item><title>Los diferentes grados de diseño de software</title><link>https://blog.thedojo.mx/2024/10/19/los-diferentes-grados-de-dise%C3%B1o-de-software/</link><pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2024/10/19/los-diferentes-grados-de-dise%C3%B1o-de-software/</guid><description>Hay una confusión enorme sobre el diseño de software. Cuando se habla de arquitectura, se empieza a hablar de patrones de diseño, infraestructura, y otras cosas con las que no nos conviene meternos en ese nivel.
Es por eso que en este artículo vamos a proponer una taxonomía para los diferentes grados de diseño de software. Pero antes hablemos de por qué te conviene hacer una distinción clara.
También presentaremos una serie de recursos que puedes usar más para aprender de cada uno de estos niveles de abstracción en el diseño de software.</description></item><item><title>¿Cómo funciona un intérprete?</title><link>https://blog.thedojo.mx/2024/09/28/c%C3%B3mo-funciona-un-int%C3%A9rprete/</link><pubDate>Sat, 28 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2024/09/28/c%C3%B3mo-funciona-un-int%C3%A9rprete/</guid><description>Un intérprete es un programa que lee código fuente y se encarga de ejecutarlo. En este artículo vamos a hablar de sus etapas y las principales tareas que realiza, para darte la idea de cómo funciona y si lo deseas, puedas tener idea de cómo hacerlo tu mismo.
Empecemos por hablar de la diferencia con un compilador.
Intérprete vs compilador Ambos tipos de programas tienen la característica de recibir código fuente, pero la diferencia está en lo que devuelven, y por lo tanto en las etapas que les permiten lograrlo.</description></item><item><title>¿Cómo funciona TensorFlow?</title><link>https://blog.thedojo.mx/2024/09/16/c%C3%B3mo-funciona-tensorflow/</link><pubDate>Mon, 16 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2024/09/16/c%C3%B3mo-funciona-tensorflow/</guid><description>TensorFlow es una de las herramientas más populares e influyentes en el campo de la del aprendizaje automático. En este artículo vamos a ver qué es exactamente y cómo funciona.
¿Qué es TensorFlow? Siempre que hablamos de TensorFlow se dice que es una &amp;ldquo;biblioteca (o librería) para hacer aprendizaje automático, pero este definición no es muy explícita y por eso vamos a ver cómo nos permite crear modelos de aprendizaje.</description></item><item><title>Por qué debes leer Designing Data-intensive Applications</title><link>https://blog.thedojo.mx/2024/08/30/por-qu%C3%A9-debes-leer-designing-data-intensive-applications/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2024/08/30/por-qu%C3%A9-debes-leer-designing-data-intensive-applications/</guid><description>Uno de los libros más recomendados para todos los desarrolladores modernos es &amp;ldquo;Designing Data-intensive Applications&amp;rdquo; de Martin Kleppmann. En este artículo corto vamos a hablar de por qué vale la pena leerlo.
¿Quién es Martin Kleppmann? Martin es un desarrollador, investigador, escritor y profesor de ciencias de la computación bastante prolífico. Actualmente trabaja en la Universidad de Cambridge y ha trabajado en empresas como Rapportive(que él fundó y fue comprada por LinkedIn, y también trabajó ahí).</description></item><item><title>Alternativas a Git</title><link>https://blog.thedojo.mx/2024/07/19/alternativas-a-git/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2024/07/19/alternativas-a-git/</guid><description>Git es una herramienta que se considera obligatoria para los desarrolladores modernos por ser el programa usado para versionamiento de código usado por la mayoría de los proyectos.
Pero no es ningún secreto que Git es una herramienta difícil de comprender y que el 90% de los desarrolladores le dan el uso más básico, temiendo romper algo y por eso tener que usar comandos más avanzados.
Hablemos de por qué es así y después veamos algunas alternativas interesantes.</description></item><item><title>5 pláticas de StrageLoop que tienes que ver</title><link>https://blog.thedojo.mx/2024/03/30/5-pl%C3%A1ticas-de-strageloop-que-tienes-que-ver/</link><pubDate>Sat, 30 Mar 2024 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2024/03/30/5-pl%C3%A1ticas-de-strageloop-que-tienes-que-ver/</guid><description>StrangeLoop fue una de las mejores conferencias de tecnología del mundo porque en ella se tratan temas poco comunes relacionados con la computación, el desarrollo de software e incluso el arte, y lo mejor: la combinación entre entras cosas.
Si te gusta reflexionar sobre temas profundos de la computación, te recomiendo mucho que le eches un ojo a las pláticas de esta conferencia, la mayoría están disponibles en su canal de YouTube.</description></item><item><title>¿Qué producimos los desarrolladores de software?</title><link>https://blog.thedojo.mx/2024/03/09/qu%C3%A9-producimos-los-desarrolladores-de-software/</link><pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2024/03/09/qu%C3%A9-producimos-los-desarrolladores-de-software/</guid><description>Para algunos, la respuesta a la pregunta del título es simplemente &amp;ldquo;software&amp;rdquo;, porque parece tan obvia que el mismo nombre lo dice. Y aunque el software tiene una definición concreta, en este artículo vamos a desmunazar los productos de un proceso de desarrollo de software. Lo que quiero que veas es que el desarrollo de software no sólamente es crear programas que fucncionen, ya que para que el software sea efectivo tiene que evolucionar, y aquí entra el punto importante.</description></item><item><title>Engines de JavaScript y sus usos</title><link>https://blog.thedojo.mx/2023/12/14/engines-de-javascript-y-sus-usos/</link><pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/12/14/engines-de-javascript-y-sus-usos/</guid><description>Ya hemos explicado antes qué es un engine de JavaScript. Como resumen, es el programa encargado de correr tus programas de JavaScript: recibe tus archivos o código de JS y ejecuta las acciones en el sistema operativo en el que se está ejecutando.
Estos engines actualmente son programas complejos que no solamente interpretan el código, sino que lo analizan y compilan a código máquina para que sea más eficiente su ejecución.</description></item><item><title>Mojo 🔥: un lenguaje prometedor</title><link>https://blog.thedojo.mx/2023/12/13/mojo-un-lenguaje-prometedor/</link><pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/12/13/mojo-un-lenguaje-prometedor/</guid><description>Chris Lattner{:target=&amp;quot;_blank&amp;quot;}, uno de los creadores de LLVM y Swift, ha estado desarrollando un nuevo lenguaje basado en la sintaxis de Python pero pensado para atacar su punto más débil: la velocidad de ejecución.
Este lenguaje se llama Mojo, y está siendo publicitado como un lenguaje para hacer aplicaciones de inteligencia artificial. Como ya dijimos, su enfoque principal está en ser un lenguaje que produzca programar eficientes, por lo que puede ser usado para cualquier aplicación que requiera alto rendimiento o hacer una gran cantidad de cálculos, justo como las aplicaciones de machine learning.</description></item><item><title>¿Qué es Real Time en sistemas de software?</title><link>https://blog.thedojo.mx/2023/12/09/qu%C3%A9-es-real-time-en-sistemas-de-software/</link><pubDate>Sat, 09 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/12/09/qu%C3%A9-es-real-time-en-sistemas-de-software/</guid><description>A veces, los programadores usamos muy libremente los conceptos. Uno de ellos es el de Real Time. En este artículo vamos a hablar de lo que significa realmente el término, lo vamos a definir claramente y sobre todo aprenderemos a diferenciar los distintos niveles o garantías que debe ofrecer un sistema en tiempo real.
¿Qué es Real Time? Un sistema que provee garantías de Tiempo Real o Real Time es aquel que garantiza que una tarea se va a ejecutar en un tiempo determinado.</description></item><item><title>Las tres garantías de seguridad de un hash</title><link>https://blog.thedojo.mx/2023/08/28/las-tres-garant%C3%ADas-de-seguridad-de-un-hash/</link><pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/08/28/las-tres-garant%C3%ADas-de-seguridad-de-un-hash/</guid><description>En este artículo profundizaremos sobre las garantías de seguridad mínimas que una función hash debe cumplir para ser criptográficamente segura. En un artículo anterior: ¿Qué es un hash? ya hablamos más detalladamente de la definición y de los algoritmos que puedes usar aún hoy de manera segura.
Empecemos por una pequeña definición de lo que es una función hash en la criptografía.
¿Qué es un hash? Un hash es una función que te devuelve un valor de tamaño fijo independientemente del tamaño de la entrada, esto implica una compresión de datos.</description></item><item><title>¿Qué es la filosofía de la computación?</title><link>https://blog.thedojo.mx/2023/08/19/qu%C3%A9-es-la-filosof%C3%ADa-de-la-computaci%C3%B3n/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/08/19/qu%C3%A9-es-la-filosof%C3%ADa-de-la-computaci%C3%B3n/</guid><description>La filosofía es una de las ramas más importantes del saber humano y, para mi, es la fundación de todas las demás ramas del conocimiento y de las ciencias. En este artículo hablaremos de la filosofía de la computación y cómo esta te puede ayudar como programador o desarrollador de software.
Empecemos primero hablando de qué es la filosofía y luego combinándola con la computación.
¿Qué es la filosofía? La filosofía busca responder las preguntas fundamentales de la existencia humana.</description></item><item><title>¿Por qué debes aprender ciencias de la computación?</title><link>https://blog.thedojo.mx/2023/08/12/por-qu%C3%A9-debes-aprender-ciencias-de-la-computaci%C3%B3n/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/08/12/por-qu%C3%A9-debes-aprender-ciencias-de-la-computaci%C3%B3n/</guid><description>Las ciencias de la computación a veces parecen algo mítico para los desarrolladores, algo que sólo aquellos que trabajan en Big Tech o en la NASA pueden entender. Pero si programas, es algo ya que usas a diario, por lo que te conviene comprenderlo mejor.
Empecemos por el principio definiendo qué son y cómo te pueden ayudar.
¿Qué son las ciencias de la computación? Las ciencias de la computación son un campo de estudio que busca entender los principios que rigen el fenómeno de la computación en general.</description></item><item><title>La matriz del conocimiento para devs</title><link>https://blog.thedojo.mx/2023/06/29/la-matriz-del-conocimiento-para-devs/</link><pubDate>Thu, 29 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/06/29/la-matriz-del-conocimiento-para-devs/</guid><description>La epistemología es la rama de la filosofía que estudia la naturaleza del conocimiento. Una de sus principales tareas es la de estudiar cómo se adquiere el conocimiento y cómo se representa.
La matriz de Rumsfeld es una herramienta que nos ayuda a representar el conocimiento y a identificar qué conocimiento nos falta para tomar decisiones. En este artículo vamos a ver cómo funciona y cómo nos puede ayudar.
La matriz de Rumsfeld Según nuestro grado de conocimiento y la consciencia que tenemos de él, podemos clasificarlo en 4 categorías:</description></item><item><title>Sigue el ciclo de la creatividad</title><link>https://blog.thedojo.mx/2023/06/27/sigue-el-ciclo-de-la-creatividad/</link><pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/06/27/sigue-el-ciclo-de-la-creatividad/</guid><description>Hay algunas personas que creen que el desarrollo de software sólo trata de resolver problemas analíticamente, pero lo cierto es que para encontrar soluciones siempre se requiere de creatividad.
Sin embargo, muchas veces pensamos que la creatividad como desarrolladores de software no es nuestro fuerte, pero no hay nada más lejos de la realidad. Si te has dedicado exitosamente a esto por un tiempo, has demostrado que eres creativo o creativa, sólo que no de la manera que se considera tradicionalmente, eso que tiene que ver con el arte, la belleza y otras cosas.</description></item><item><title>Modelos mentales para desarrolladores: modelos elementales</title><link>https://blog.thedojo.mx/2023/06/22/modelos-mentales-para-desarrolladores-modelos-elementales/</link><pubDate>Thu, 22 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/06/22/modelos-mentales-para-desarrolladores-modelos-elementales/</guid><description>La mente es la principal herramienta del desarrollador de software. Puedes ayudar a que se desempeñe mejor si le das, a su vez, herramientas que te permitan organizar, comprender, combinar y analizar más rápido la información. Estas herramientas además te pueden ayudar a ver cosas claramente que antes eran imposibles de ver, o a llegar más profundo en los análisis.
Estas herramientas son los modelos mentales, que en este artículo explicaremos, pero además daremos algunos ejemplos que te servirán directamente como desarrollador.</description></item><item><title>¿Son aplicables y prácticos los principios SOLID?</title><link>https://blog.thedojo.mx/2023/06/17/son-aplicables-y-pr%C3%A1cticos-los-principios-solid/</link><pubDate>Sat, 17 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/06/17/son-aplicables-y-pr%C3%A1cticos-los-principios-solid/</guid><description>Los principios SOLID, se enseñan como verdades incuestionables sobre el buen desarrollo de software. Aunque, justo por la educación, antes era completamente partidario de estos, con el tiempo me fui dando cuenta de varias de las fallas que presentan.
En este artículo te voy a hablar de las fallas generales como conjunto, pero también es un índice para una serie de artículos que escribí sobre cada uno de ellos, analizándolo a profundidad.</description></item><item><title>Libros que todo desarrollador de software debería leer: desarrollo de carrera</title><link>https://blog.thedojo.mx/2023/06/15/libros-que-todo-desarrollador-de-software-deber%C3%ADa-leer-desarrollo-de-carrera/</link><pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/06/15/libros-que-todo-desarrollador-de-software-deber%C3%ADa-leer-desarrollo-de-carrera/</guid><description>En este artículo vamos a hablar de los libros que te pueden ayudar a avanzar en tu carrera como desarrollador de software, que desde mi punto de vista, son esenciales.
Algunos desarrolladores piensan que basta simplemente con aprender a programar o diseñar software bien, pero lo cierto es que también hay que tener otras habilidades y conocimientos para que tu carrera avance a buen ritmo, y llegues a puestos de liderazgo si así lo deseas.</description></item><item><title>Libros que todo desarrollador de software debería leer: arquitectura</title><link>https://blog.thedojo.mx/2023/06/08/libros-que-todo-desarrollador-de-software-deber%C3%ADa-leer-arquitectura/</link><pubDate>Thu, 08 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/06/08/libros-que-todo-desarrollador-de-software-deber%C3%ADa-leer-arquitectura/</guid><description>Hablemos sobre los libros de arquitectura de software que te enseñarán a tomar en cuenta los aspectos importantes de este campo y te pueden hacer mejor desarrollador. Como muchos desarrolladores con experiencia mencionan, la arquitectura es un rol, no un puesto de trabajo. Como rol, lo puedes ejercer parcialmente, y todos los desarrolladores deberíamos hacer arquitectura de software a diferentes escalas. El arquitecto que sólo hace diseños no debería existir.</description></item><item><title>Pilares fundamentales de las ciencias de la computación</title><link>https://blog.thedojo.mx/2023/05/30/pilares-fundamentales-de-las-ciencias-de-la-computaci%C3%B3n/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/05/30/pilares-fundamentales-de-las-ciencias-de-la-computaci%C3%B3n/</guid><description>The computer is the tool but not the object of study. - Peter Denning
Entender la computación profundamente es importante para cualquier desarrollador de software, porque al avanzar en su carrera se encontrará con problemas relacionados con las principios más fundamentales de la computación. Piensa en los siguientes casos:
¿Es mejor mantener este sistema como un monolito o dividirlo en microservicios? ¿Cómo puedo hacer que este sistema sea más rápido?</description></item><item><title>Libros que todo desarrollador de software debería leer: desarrollo</title><link>https://blog.thedojo.mx/2023/05/25/libros-que-todo-desarrollador-de-software-deber%C3%ADa-leer-desarrollo/</link><pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/05/25/libros-que-todo-desarrollador-de-software-deber%C3%ADa-leer-desarrollo/</guid><description>Ya hablamos en un artículo anterior sobre los libros que te haría bien leer en el tema de ciencias de la computación. Ahora vamos a hablar sobre el tema de desarrollo de software, cómo crear mejor software y con mejor calidad. En este artículo también se incluyen libros sobre ingeniería de software por ser la disciplina más confiable para crear software de calidad.
Empecemos con las recomendaciones, espero que te sirvan.</description></item><item><title>Libros que todo desarrollador de software debería leer: ciencias de la computación</title><link>https://blog.thedojo.mx/2023/05/13/libros-que-todo-desarrollador-de-software-deber%C3%ADa-leer-ciencias-de-la-computaci%C3%B3n/</link><pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/05/13/libros-que-todo-desarrollador-de-software-deber%C3%ADa-leer-ciencias-de-la-computaci%C3%B3n/</guid><description>Hablemos de algunos libros que te pueden ayudar a avanzar en tu carrera como desarrollador de software, por diferentes razones, por ejemplo te ayudarán a fortalecer tus bases, o te darán ideas para hacer mejor software, mejores arquitecturas o a mejorar como profesional en general.1
Empecemos por los fundamentos mismos de lo que hacemos. Los siguientes libros te ayudarán a entender mejor cómo funciona la computación desde sus raíces.
Aunque esta sección está en primer lugar, no significa que debas leerlos antes que todo.</description></item><item><title>¿Por qué deberías leer Data and Reality?</title><link>https://blog.thedojo.mx/2023/05/06/por-qu%C3%A9-deber%C3%ADas-leer-data-and-reality/</link><pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/05/06/por-qu%C3%A9-deber%C3%ADas-leer-data-and-reality/</guid><description>Gran parte de nuestro trabajo como desarrolladores consiste en modelar entidades del mundo real en el código, transformarlas, guardarlas y recuperarlas. Estas entidades se pasan entre diferentes procesos para producir un resultado. A veces también nos tenemos que inventar entidades para representar conceptos abstractos que no existen físicamente.
Modelar datos es una de las habilidades fundamentales cuando estamos desarrollando.Cuando estás programando un algoritmo, estás modelando un procedimiento de la vida real en código.</description></item><item><title>El principio de Inversión de Dependencias</title><link>https://blog.thedojo.mx/2023/04/22/el-principio-de-inversi%C3%B3n-de-dependencias/</link><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/04/22/el-principio-de-inversi%C3%B3n-de-dependencias/</guid><description>Este es el artículo final sobre el análisis de los principios SOLID. En este artículo veremos el principio de Inversión de Dependencias, el cual nos dice que las clases de alto nivel no deben depender de las clases de bajo nivel, sino que ambas deben depender de abstracciones.
Veamos qué tan útil es en la vida real, aplicándolo día a día, cuáles son las formas de implementarlo y algunos ejemplos, asó como algunas críticas.</description></item><item><title>Creando agentes con LangChain y GPT-4</title><link>https://blog.thedojo.mx/2023/04/20/creando-agentes-con-langchain-y-gpt-4/</link><pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/04/20/creando-agentes-con-langchain-y-gpt-4/</guid><description>En este pequeño tutorial vamos a hablar de cómo puedes crear agentes que interactúen con el mundo exterior, usando LangChain y como modelo de lenguaje GPT-4. Como siempre, la mejor manera de aprender es haciendo algo, por lo que vamos a crear un agente
¿Qué es un agente? En este contexto, además de una cosa que puede actuar por sí mismo, se entiende que un agente puede hacer dos cosas más:</description></item><item><title>Composición en el software</title><link>https://blog.thedojo.mx/2023/04/17/composici%C3%B3n-en-el-software/</link><pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/04/17/composici%C3%B3n-en-el-software/</guid><description>Composición:
Es la acción de combinar componentes individuales para formar un sistema más complejo.
Componer es la técnica más efectiva para construir software de manera organizada. La composición nos permite crear software complejo porque nos permite construir piezas pequeñas que resuelven problemas manejables y luego &amp;ldquo;juntarlas&amp;rdquo; para entregar la solución de nuestro problema.
Veamos algunas formas de hacer composición en el software y por qué es más efectivo que otras formas de reutilizar código.</description></item><item><title>Instrumentando microservicios en Go con Gin y AWS X-Ray</title><link>https://blog.thedojo.mx/2023/04/17/instrumentando-microservicios-en-go-con-gin-y-aws-x-ray/</link><pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/04/17/instrumentando-microservicios-en-go-con-gin-y-aws-x-ray/</guid><description>En una arquitectura de microservicios, las operaciones muchas veces abarcan múltiples servicios y recursos tales como gateways, microservicios, balanceadores de carga, bases de datos entre otros. La naturaleza distribuida de los microservicios es lo que hace invaluable la instrumentazión de software.
Si nuestro código provee información de traceo para requests, y logs, podemos decir que está instrumentado y que podemos observar cómo se está desempeñando nuestro sistema.
La instrumentación de servicios es especialmente útil para identificar y resolver problemas de rendimiento y errores.</description></item><item><title>Usando LangChain 🦜 para crear software basado en LLM's</title><link>https://blog.thedojo.mx/2023/04/15/usando-langchain-para-crear-software-basado-en-llms/</link><pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/04/15/usando-langchain-para-crear-software-basado-en-llms/</guid><description>Los grandes modelos de lenguaje o LLM&amp;rsquo;s (Large Language Models) han sido noticia en este 2023. Es por eso que han surgido muchos proyectos y herramientas que permiten crear software basado en estas herramientas.
En este artículo vamos a poner un pequeño tutorial de una herramienta creada para hacer aplicaciones basadas en LLM&amp;rsquo;s: LangChain.
¿Qué es LangChain? Las aplicaciones basadas en procesamiento de lenguaje natural, sea como una herramienta de comunicación o como su producto principal, normalmente requieren fuentes de información para potenciar sus capacidades.</description></item><item><title>Cuando separar el código</title><link>https://blog.thedojo.mx/2023/04/07/cuando-separar-el-c%C3%B3digo/</link><pubDate>Fri, 07 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/04/07/cuando-separar-el-c%C3%B3digo/</guid><description>Hay quienes afirman que mientras más pequeñas sean tus clases o funciones, mejor. Hasta llegan a poner un límite de la líneas que pueden ir en un método o función. Esto crea código súper fragmentado que llega a ser complejo por el simple hecho de tener muchos elementos individuales que luego se tienen que unir mediante más código. Además, trazar la causa de algo a través de un código similar es casi imposible o, por lo menos, te puede tomar mucho tiempo.</description></item><item><title>El principio de segregación de Interfaces</title><link>https://blog.thedojo.mx/2023/04/01/el-principio-de-segregaci%C3%B3n-de-interfaces/</link><pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/04/01/el-principio-de-segregaci%C3%B3n-de-interfaces/</guid><description>Continuemos con el estudio de los principios SOLID. En esta ocasión hablaremos del cuarto principio: El principio de segregación de interfaces.
Recuerda que el objetivo de estos artículos no es explicártelos como si fueran una religión que estás mal si no sigues, sino analizarlos bajo una luz crítica y decidir si de verdad son útiles o podemos usar otro principio.
Analicemos primero el enunciado, junto con algunos ejemplos y veamos si nos conviene aplicarlo directamente o no.</description></item><item><title>Descomponiendo tu aplicación en módulos</title><link>https://blog.thedojo.mx/2023/03/25/descomponiendo-tu-aplicaci%C3%B3n-en-m%C3%B3dulos/</link><pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/03/25/descomponiendo-tu-aplicaci%C3%B3n-en-m%C3%B3dulos/</guid><description>Hay un dicho que tiene que ver con la guerra que es un gran consejo para crear gran software:
Divide y vencerás
Dividir un problema para resolverlo por partes tiene muchas ventajas, en este artículo vamos a hablar de ellas, así como de las técnicas y los criterios que puedes seguir para hacerlo efectivamente. Específicamente, en este artículo vamos a hablar de cómo dividir la aplicación en módulos. Pero antes definamos lo que es un módulo.</description></item><item><title>¿Qué es una API?</title><link>https://blog.thedojo.mx/2023/03/18/qu%C3%A9-es-una-api/</link><pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/03/18/qu%C3%A9-es-una-api/</guid><description>A veces limitamos el uso de la palabra API a un programa que nos regresa información mediante una conexión web, generalmente en un formato que una máquina puede procesar. Pero muchas otras veces se usa de manera más amplia. En este artículo hablaremos de otras acepciones y qué tiene que ver con la buena programación.
Application Programming Interface La realidad es que el inicialismo &amp;ldquo;API&amp;rdquo; es casi auto-explicativo: Interfaz de Programación de Aplicación.</description></item><item><title>¿Qué es la abstracción?</title><link>https://blog.thedojo.mx/2023/03/13/qu%C3%A9-es-la-abstracci%C3%B3n/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/03/13/qu%C3%A9-es-la-abstracci%C3%B3n/</guid><description>Gran parte del trabajo que hacemos como desarrolladores de software consiste en &amp;ldquo;abstraer&amp;rdquo;, pero a veces no entendemos lo que esto significa.
En este artículo vamos a empezar explicando qué es la abstracción en general y luego cómo puedes mejorar tu habilidad de abstraer para programar más rápido y para crear mejores programas. La capacidad de crear mejores abstracciones te permitirá crear programas que no creías que pudieran existir o que tú pudieras crear.</description></item><item><title>El principio de sustitución de Liskov</title><link>https://blog.thedojo.mx/2023/03/06/el-principio-de-sustituci%C3%B3n-de-liskov/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/03/06/el-principio-de-sustituci%C3%B3n-de-liskov/</guid><description>El tercer principio enunciado en los principios SOLID es el principio de sustitución de Liskov. ¿Qué significa este principio? Y más importante, ¿vale la pena seguirlo? Pero antes de hablar del principio, hablemos de Barbara Liskov, la persona que lo inspiró y que estableció los conceptos principales.
Un poco de historia: Barbara Liskov Barbara Liskov es una matemática muy reconocida en las ciencias de la computación por los grandes aportes que ha hecho.</description></item><item><title>¿Qué es un modelo transformador de inteligencia artificial?</title><link>https://blog.thedojo.mx/2023/02/27/qu%C3%A9-es-un-modelo-transformador-de-inteligencia-artificial/</link><pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/02/27/qu%C3%A9-es-un-modelo-transformador-de-inteligencia-artificial/</guid><description>En los últimos años los modelos de inteligencia artificial generativos han avanzado mucho. Esto es en parte gracias a una nueva arquitectura para las redes neuronales llamada transformer o de transformador, como les llamaremos en este artículo. Hablemos de en qué consiste esta arquitectura y por qué es tan revolucionaria o porque ha ayudado tanto a avanzar en el campo de la inteligencia artificial.
Redes neuronales recurrentes (RNN) Estas eran el estándar para hacer varias tareas, entre ellas la traducción.</description></item><item><title>Code Review: La practica Milenaria que seguimos haciendo mal.</title><link>https://blog.thedojo.mx/2023/02/27/code-review-la-practica-milenaria-que-seguimos-haciendo-mal./</link><pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/02/27/code-review-la-practica-milenaria-que-seguimos-haciendo-mal./</guid><description>¿Qué es un &amp;ldquo;Code Review&amp;rdquo;? Es la práctica que realizan los equipos de ingeniería de software para verificar los cambios de código antes de fusionarlos con el código fuente principal.
Dónde se aplica En todas partes, cuando eres miembro de un equipo, como colaborador individual o como estudiante. Tienes la oportunidad de involucrarte, contribuir y dar tu opinión a código escrito por otra persona. Algunos ejemplos:
Durante una sesión de &amp;ldquo;pair programming&amp;rdquo; &amp;ldquo;Dos cabezas piensan mejor que una.</description></item><item><title>La importancia de entender los principios de la computación</title><link>https://blog.thedojo.mx/2023/02/17/la-importancia-de-entender-los-principios-de-la-computaci%C3%B3n/</link><pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/02/17/la-importancia-de-entender-los-principios-de-la-computaci%C3%B3n/</guid><description>Este artículo está inspirado por lo que leí en el resumen del libro que Camilo Chacón Sartori está escribiendo y que muy amablemente me compartió para que le diera mi opinión. El libro se llama &amp;ldquo;Principios de programación&amp;rdquo;. Espero que pronto esté disponible, pero mientras, hablemos de la importancia de comprender los principios básicos de la computación y programación, con la esperanza de que te emociones por aprender más sobre ellos.</description></item><item><title>Máquinas de Turing no deterministas y problemas NP</title><link>https://blog.thedojo.mx/2023/02/08/m%C3%A1quinas-de-turing-no-deterministas-y-problemas-np/</link><pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/02/08/m%C3%A1quinas-de-turing-no-deterministas-y-problemas-np/</guid><description>En el artículo anterior hablamos de las clases de complejidad y su relación con la criptografía. Hablamos brevemente de los problemas NP y de dijimos que pueden ser resueltos por una máquina de Turing no determinista en un tiempo razonable (complejidad polinomial).
En este artículo vamos a entender qué son las máquinas de Turing no deterministas, pero empecemos entendiendo la diferencia entre determinismo y no determinismo.
Determinismo y no determinismo En la física y las ciencias existen básicamente dos tipos de sistemas basados en el conocimiento que podemos tener de su comportamiento en un momento dado.</description></item><item><title>Problemas difíciles de la computación y su relación con la criptografía: Problemas NP</title><link>https://blog.thedojo.mx/2023/02/03/problemas-dif%C3%ADciles-de-la-computaci%C3%B3n-y-su-relaci%C3%B3n-con-la-criptograf%C3%ADa-problemas-np/</link><pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/02/03/problemas-dif%C3%ADciles-de-la-computaci%C3%B3n-y-su-relaci%C3%B3n-con-la-criptograf%C3%ADa-problemas-np/</guid><description>La intuición a veces nos dice que cualquier cálculo numérico debería ser muy fácil para una computadora. Sin embargo, hay problemas numéricos y no numéricos que son imposibles de resolver para las computadoras actuales, independientemente de su poder de procesamiento.
La criptografía actual está soportada por una serie de problemas que suponemos muy difíciles de resolver de la ciencias de la computación.
En esta serie de artículos vamos a estar hablando de ellos para entenderlos a profundidad y sobre todo para entender cómo es que se relacionan con los algoritmos criptográficos, como con los algoritmos de llave pública, como Diffie-Hellman y RSA.</description></item><item><title>Patrones para aprendices: Cava más hondo</title><link>https://blog.thedojo.mx/2023/01/25/patrones-para-aprendices-cava-m%C3%A1s-hondo/</link><pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/01/25/patrones-para-aprendices-cava-m%C3%A1s-hondo/</guid><description>¿Sientes que sabes un poquito de muchas cosas pero no te sientes con lo confianza de decir que eres experto en algo? Muchos desarrolladores de software sentimos eso, exacerbado por la gran cantidad de herramientas, lenguajes y situaciones que las necesidades del negocio nos impone.
En este artículo vamos a hablar acerca de un un consejo encontrado en el libro Apprenticeship Patterns que en español llamaríamos &amp;ldquo;Patrones para aprendices&amp;rdquo;. En este libro se mencionan una serie de consejos con acciones para los desarrolladores de software que se consideran aprendices.</description></item><item><title>¿Qué es el bytecode?</title><link>https://blog.thedojo.mx/2023/01/22/qu%C3%A9-es-el-bytecode/</link><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/01/22/qu%C3%A9-es-el-bytecode/</guid><description>Tanto para Java como para otros lenguajes que son interpretados, por ejemplo Python o JavaScript, se genera una representación intermedia como resultado de la ejecución o compilación. A este código le llamamos bytecode.
Hablemos de qué es y para qué existe.
¿Qué es el bytecode? El bytecode es una representación intermedia de tu programa que tiene dos características principales:
No es tan legible como el código fuente, por ser más compacta.</description></item><item><title>Qué es la compilación Just In Time (JIT)</title><link>https://blog.thedojo.mx/2023/01/18/qu%C3%A9-es-la-compilaci%C3%B3n-just-in-time-jit/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/01/18/qu%C3%A9-es-la-compilaci%C3%B3n-just-in-time-jit/</guid><description>Los lenguajes de programación y los compiladores son de las cosas más interesantes en el desarrollo de software. Hace tiempo ha empezado a sonar más un término: JIT o compilación Just In Time, ya que varios lenguajes lo han integrado a sus entornos de ejecución, aquí la llamaremos &amp;ldquo;compilación bajo demanda&amp;rdquo; (gracias a Manuel Rubio por la sugerencia). Durante el artículo entenderás por qué creemos que esta traducción es adecuada.</description></item><item><title>Ejercicio: programando un perceptrón con Python</title><link>https://blog.thedojo.mx/2023/01/07/ejercicio-programando-un-perceptr%C3%B3n-con-python/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/01/07/ejercicio-programando-un-perceptr%C3%B3n-con-python/</guid><description>En este post platicaremos acerca de cómo funciona un perceptrón con un ejemplo de código y las técnicas que utiliza para aproximar una función a partir de datos.
Si no tienes claro lo que es un perceptrón, puedes leer nuestro artículo anterior{:target=&amp;quot;_blank&amp;quot;}. Ahí también explicamos las bases de funcionamiento. En este artículo lo vamos a ilustrar de la manera más sencilla posible.
El conjunto de datos Recuerda que para poder crear un algoritmo de machine learning necesitamos un conjunto de datos, ya que el punto es que este algoritmo aprenda de estos datos.</description></item><item><title>Claridad de Saša Jurić</title><link>https://blog.thedojo.mx/2022/12/30/claridad-de-sa%C5%A1a-juri%C4%87/</link><pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/12/30/claridad-de-sa%C5%A1a-juri%C4%87/</guid><description>Hablemos de las cosas que hacen más entendible y claro tu código.
Muchas de estas ideas están basadas en la plática &amp;ldquo;Clarity&amp;rdquo; de Saša Jurić de la Elixir Conf EU de 2021, de hecho, podríamos considerar este artículo como un análisis y extensión de esa plática.
Cuando trabajamos con bases de código normalmente necesitamos entenderlas. Incluso aunque vayamos a escribir algo nuevo necesitamos entender lo demás para poder integrarlo. Esto lo hacemos mediante la lectura de código.</description></item><item><title>Explicaciones elocuentes</title><link>https://blog.thedojo.mx/2022/12/26/explicaciones-elocuentes/</link><pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/12/26/explicaciones-elocuentes/</guid><description>Aunque el principal trabajo de un desarrollador es comunicar sus pensamientos a la computadora a través de instrucciones precisas (el código), ningún trabajo serio o que valga la pena se puede hacer solo. Casi siempre formamos parte de un equipo, puede ser con otros roles o con más desarrolladores. Para trabajar efectivamente, hay que comunicarse lo mejor posible. Russ Olsen tiene una plática llamada Eloquent Explanations en la que nos da consejos sobre cómo comunicarnos claramente, además de que da razones por las que es importante hacerlo.</description></item><item><title>Creando código de Python robusto, Parte 1</title><link>https://blog.thedojo.mx/2022/12/24/creando-c%C3%B3digo-de-python-robusto-parte-1/</link><pubDate>Sat, 24 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/12/24/creando-c%C3%B3digo-de-python-robusto-parte-1/</guid><description>En esta serie de posts vamos a hablar de algunas cosas que harán que tu código de Python sea:
resistente al paso del tiempo más fácil de entender, de mantener y cambiar que evite errores difíciles de encontrar En este artículo vamos a empezar a hablar de cómo hacer código que sea resistente al paso del tiempo.
El tiempo y los cambios En realidad el puro paso del tiempo no le hace nada a ninguna cosa.</description></item><item><title>Tomando notas efectivamente: Zettelkasten</title><link>https://blog.thedojo.mx/2022/12/22/tomando-notas-efectivamente-zettelkasten/</link><pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/12/22/tomando-notas-efectivamente-zettelkasten/</guid><description>Como desarrolladores de Software, necesitamos tener sistemas efectivos para aprender. Y aunque no seas desarrollador@ de software, muchas profesiones requieren que se esté aprendiendo constantemente, sea nuevos avances en el estado del arte, nuevas tecnologías, nuevas técnicas, o simplemente aprender nuevas áreas para entrar en &amp;ldquo;pastos más verdes&amp;rdquo;.
En este artículo hablaremos de la importancia de tomar buenas notas mientras consumes información, y cómo este sistema te puede ayudar a ti mismo a producir más información y reflexiones, sea para ti mismo, para tu equipo o para el mundo.</description></item><item><title>¿Cómo aprender Rust? Recursos para empezar</title><link>https://blog.thedojo.mx/2022/12/18/c%C3%B3mo-aprender-rust-recursos-para-empezar/</link><pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/12/18/c%C3%B3mo-aprender-rust-recursos-para-empezar/</guid><description>En el artículo pasado hablamos de por qué te conviene aprender Rust, un lenguaje moderno, seguro y productivo. Ahora hablemos de cómo empezar, primero veamos los recursos en español y sigamos con recursos en inglés.
Guía oficial En la página oficial de Rust puedes encontrar una página que te da muchos recursos para aprender Rust: Aprende Rust. Lo malo es que la mayoría de los recursos a los que refiere están en inglés.</description></item><item><title>¿Por qué aprender Rust en 2023?</title><link>https://blog.thedojo.mx/2022/12/13/por-qu%C3%A9-aprender-rust-en-2023/</link><pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/12/13/por-qu%C3%A9-aprender-rust-en-2023/</guid><description>Rust se ha establecido como uno de los lenguajes más queridos entre los desarrolladores en los últimos años y desde 2016 está en el número uno, según la encuesta anual de Stack Overflow. Esto no es de extrañar, ya que Rust es un lenguaje que ofrece muchas cosas buenas a aquellos que lo usan.
En este artículo vamos a hablar de algunas de sus características, las ventajas de su ecosistema, y por qué te conviene aprenderlo.</description></item><item><title>El principio Abierto/Cerrado (Open/Closed)</title><link>https://blog.thedojo.mx/2022/12/03/el-principio-abierto/cerrado-open/closed/</link><pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/12/03/el-principio-abierto/cerrado-open/closed/</guid><description>El principio Abierto/Cerrado, originalmente establecido por Bertrand Meyer en 1988 (pero popularizado por Robert Martin{:target=&amp;quot;_blank&amp;quot;}), es para mi uno de los más útiles en el conjunto (tal vez el más útil) de SOLID.
Vamos a analizarlo, ver sus caso de uso y finalmente a establecer sus relaciones con otros principios de diseño de software que te pueden ayudar a crear mejores programas.
El principio Abierto/Cerrado Este principio establece que:
Cualquier módulo de software debería estar abierto para la extensión, pero cerrado para modificación.</description></item><item><title>Análisis de los principios SOLID: Principio de Responsabilidad Única</title><link>https://blog.thedojo.mx/2022/12/01/an%C3%A1lisis-de-los-principios-solid-principio-de-responsabilidad-%C3%BAnica/</link><pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/12/01/an%C3%A1lisis-de-los-principios-solid-principio-de-responsabilidad-%C3%BAnica/</guid><description>En esta serie de artículos vamos a hablar sobre los cinco principios SOLID. Se dice que todo programador que quiera crear código mantenible y &amp;ldquo;limpio&amp;rdquo; debe conocer y usar. La estructura de los artículos llevará la siguiente forma:
Explicación del principio Ejemplos y contraejemplos para pensar Críticas y alternativas Esta serie de artículos surge debido a que aunque son poco entendidos por la mayoría de los programadores, estos principios se toman como verdades universales que hay que seguir.</description></item><item><title>Crea hashes resistentes a balas con Keccak (SHA-3)</title><link>https://blog.thedojo.mx/2022/10/12/crea-hashes-resistentes-a-balas-con-keccak-sha-3/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/10/12/crea-hashes-resistentes-a-balas-con-keccak-sha-3/</guid><description>Ya hemos hablado en este blog de lo que es un hash e incluso qué hashes puedes usar para guardar tus passwords de manera segura.
En este artículo vamos a hablar de uno en específico, el que estamos seguros que deberías usar para cualquier uso futuro en tus programas y sistemas, el que ha sido nombrado como el Secure Hash Algorithm 3 (SHA-3): Keccak.
¿Qué es Keccak? Keccak es una familia de funciones, creadas para cubrir la necesidad de un sucesor de la versión 2 del Secure Hash Algorithm, que tiene algunas limitaciones y vulnerabilidades (por ejemplo, el ataque de extensión de longitud).</description></item><item><title>Mi experiencia como Mentora</title><link>https://blog.thedojo.mx/2022/09/19/mi-experiencia-como-mentora/</link><pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/09/19/mi-experiencia-como-mentora/</guid><description>&amp;ldquo;El círculo está completo. Cuando te dejé, yo erá el alumno. Ahora, soy el maestro&amp;rdquo;. - Darth Vader.
Intentando evitar ser una maestra del mal; en los últimos meses tuve la oportunidad de ser mentora de dos mujeres increíbles.
El viaje comenzó con mi participación en un programa de capacitación en mi actual trabajo; la empresa invitó a personas con experiencia Senior para ser mentores de los niveles Junior y Mid.</description></item><item><title>¿Estás cambiando de trabajo?</title><link>https://blog.thedojo.mx/2022/08/11/est%C3%A1s-cambiando-de-trabajo/</link><pubDate>Thu, 11 Aug 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/08/11/est%C3%A1s-cambiando-de-trabajo/</guid><description>Era noviembre de 2020, sí 2020, el primer año del caos&amp;hellip; Momento, aqui va más contexto: llevaba 7 años trabajando para un comercio electrónico, era muy apreciada en ese trabajo y lo disfrutaba mucho. Fuimos una de las mejores empresas de comercio electrónico en LATAM. Empecé a trabajar allí cuando era una startup y disfruté participando en su crecimiento. Durante mi último año allí, una gran corporación multinacional de LATAM adquirió la empresa y con esa adquisición llegaron nuevos desafíos.</description></item><item><title>Resumen: Historia de los lenguajes de programación</title><link>https://blog.thedojo.mx/2022/06/11/resumen-historia-de-los-lenguajes-de-programaci%C3%B3n/</link><pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/06/11/resumen-historia-de-los-lenguajes-de-programaci%C3%B3n/</guid><description>¿Te has preguntado cómo nacieron los primeros lenguajes de programación? Manuel Rubio, autor de &amp;lsquo;Historia de los lenguajes de programación&amp;rsquo;, nos habla lo explica de manera cronológica en el primer tomo de esta obra.
Resumen general El libro habla de manera más o menos cronológica del nacimiento de los primeros lenguajes de programación, desde la época de 1940. La forma en que lo narra te hace comprender claramente por qué eran necesarios y las diferentes tendencias que se dieron.</description></item><item><title>Consistencia en el código</title><link>https://blog.thedojo.mx/2022/06/02/consistencia-en-el-c%C3%B3digo/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/06/02/consistencia-en-el-c%C3%B3digo/</guid><description>Una de las mejores formas de ayudar a que tu código sea fácil de mantener es hacer que el estilo tanto de formateo como de programación en general sea consistente. Analicemos este concepto que se menciona en &amp;ldquo;A Philosophy of Software Design&amp;rdquo;.
¿Qué es la consistencia en el código? Básicamente, significa que las que cosas o el código que hace lo mismo luzca y se programen igual y las piezas de código que no hacen los mismo, luzcan y se programen diferente.</description></item><item><title>Aprendiendo desarrollo efectivamente</title><link>https://blog.thedojo.mx/2022/01/03/aprendiendo-desarrollo-efectivamente/</link><pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2022/01/03/aprendiendo-desarrollo-efectivamente/</guid><description>Desde que comenzamos en la escuela, a muy pocos de nosotros nos han enseñado técnicas para aprender efectivamente, aunque la escuela trata de aprender lo más efectivamente posible.
El desarrollo de software es un campo muy amplio en el que tenemos que aprender constantemente, sea por el cambio de las tecnologías, porque tenemos que aprender del área en la que estamos aplicando nuestro conocimiento tecnológico para crear software efectivo o simplemente porque queremos cambiar de área.</description></item><item><title>Criptografía para desarrolladores: Códigos de autenticación de mensajes</title><link>https://blog.thedojo.mx/2021/12/30/criptograf%C3%ADa-para-desarrolladores-c%C3%B3digos-de-autenticaci%C3%B3n-de-mensajes/</link><pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/30/criptograf%C3%ADa-para-desarrolladores-c%C3%B3digos-de-autenticaci%C3%B3n-de-mensajes/</guid><description>Ya hemos hablado de los cifrados de bloque, de flujo y de los hashes, ahora hablemos de un híbrido entre ellos que funciona como un hash pero usa una llave como un cifrado. El uso principal de este tipo de algoritmos es la autenticación y verificación de mensajes, pero también pueden ser usados para generar derivados de una llave, por su carácter pseudo-aleatorio.
En general este tipo de algoritmos se llaman hashes con llave o Keyed Hashes.</description></item><item><title>El tiempo monótono</title><link>https://blog.thedojo.mx/2021/12/26/el-tiempo-mon%C3%B3tono/</link><pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/26/el-tiempo-mon%C3%B3tono/</guid><description>Saber cuánto tiempo ha pasado desde cierto evento en nuestro programa es algo que podemos requerir en algunos casos. Uno de los casos que más he visto es cuando se está midiendo el tiempo que tarda una parte del programa o un evento externo.
El tiempo o reloj monótono es un concepto que todo programador debería conocer, para evitar errores y código frágil al medir el tiempo en los programas.</description></item><item><title>Matemáticas para criptografía</title><link>https://blog.thedojo.mx/2021/12/25/matem%C3%A1ticas-para-criptograf%C3%ADa/</link><pubDate>Sat, 25 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/25/matem%C3%A1ticas-para-criptograf%C3%ADa/</guid><description>¿Quieres entender por qué los algoritmos criptográficos pueden prometer seguridad? Todos están basados en operaciones matemáticas, problemas difíciles de resolver, probabilidad y estadística.
Veamos un plan de estudios de matemáticas que podrías usar para adquirir las habilidades matemáticas necesarias para entender mejor los algoritmos criptográficos.
Básico básico Empecemos por los fundamentos más profundos que debes tener, que hasta pueden parecer obvios. Lo importante es que tengas la seguridad de que los dominas y si no, te proporcionamos algunos recursos para que los repases.</description></item><item><title>HTTP 1.1, HTTP/2 y HTTP/3</title><link>https://blog.thedojo.mx/2021/12/15/http-1.1-http/2-y-http/3/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/15/http-1.1-http/2-y-http/3/</guid><description>HTTP es el estándar más importante de la web actual, porque permite la transmisión de información entre los diferentes actores de la red. Hablemos un poco de su evolución como estándar para servir mejor a los intereses de la industria y de los usuarios y de su estado actual.
TL;DR | HTTP/3 hará que tus páginas web descarguen mucho más rápido, gracias a que trabaja de forma diferente a bajo nivel.</description></item><item><title>Tipos de algoritmos criptográficos: cifrados de flujo</title><link>https://blog.thedojo.mx/2021/12/12/tipos-de-algoritmos-criptogr%C3%A1ficos-cifrados-de-flujo/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/12/tipos-de-algoritmos-criptogr%C3%A1ficos-cifrados-de-flujo/</guid><description>Ya hablamos de lo que es la criptografía y del tipo de cifrado más fuerte y seguro que existe en la criptografía: los cifrados de bloque.
Ahora hablemos de cómo puedes transformar cadenas de texto plano de tamaño indeterminado en cadenas de texto cifradas del mismo tamaño. Esto se logra con los cifrados de flujo o stream ciphers.
Definición de cifrado de flujo La mejor manera de entenderlos es en contraste con los cifrados de bloque: mientras los cifrados de bloque toman pedazos de contenido de tamaño fijo y los cifran, aplicando diferentes técnicas para abarcar todo el contenido, los cifrados de flujo toman contenido de tamaño arbitrario y lo cifran, bit por bit, devolviéndote un texto cifrado del mismo tamaño.</description></item><item><title>Criptografía VS computación cuántica</title><link>https://blog.thedojo.mx/2021/12/11/criptograf%C3%ADa-vs-computaci%C3%B3n-cu%C3%A1ntica/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/11/criptograf%C3%ADa-vs-computaci%C3%B3n-cu%C3%A1ntica/</guid><description>“If you are not completely confused by quantum mechanics, you do not understand it.” - Richard Feynman
La computación cuántica es una tecnología muy prometedora que lleva décadas en gestación y cada vez la vemos más cerca. Una de las cosas que más llama la atención es la capacidad de cómputo que las computadoras cuánticas pueden tener, en este artículo aclararemos de qué se trata todo esto y cómo se relaciona con la criptografía, uno de los campos más afectados.</description></item><item><title>La regla del 'Cero, Uno o Infinito'</title><link>https://blog.thedojo.mx/2021/12/10/la-regla-del-cero-uno-o-infinito/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/10/la-regla-del-cero-uno-o-infinito/</guid><description>La regla del &amp;lsquo;Cero, Uno o Infinito&amp;rsquo; es una guía para diseñar software que sea más fácil de usar, tanto para otros desarrolladores como para los usuarios finales. La regla en inglés es:
“Allow none of foo, one of foo, or any number of foo.” - Willem van der Poel
Esta regla establece que respecto a la existencia de elementos, deberías permitir que no exista ninguno, solamente uno o un número arbitrario (potencialmente infinito, mientras las limitantes ) de estos elementos.</description></item><item><title>Cómo convertirte en un mago programando</title><link>https://blog.thedojo.mx/2021/12/09/c%C3%B3mo-convertirte-en-un-mago-programando/</link><pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/09/c%C3%B3mo-convertirte-en-un-mago-programando/</guid><description>Todos queremos crecer en nuestra carrera de programación y para lograrlo necesitamos adquirir hábitos y técnicas que nos ayudarán a no quedarnos estancados. En este artículo hablaremos de las tres técnicas que me parecen más importantes del wizardzine gratuito &amp;ldquo;So you want to be a wizard&amp;rdquo; de Julia Evans.
Espero que estas recomendaciones te dejen reflexionando y que termines con ganas de leer el wizardzine completo. Los pongo en el orden que personalmente me parecen más impactantes, pero para ti puede ser diferente, por lo que te recomiendo que lo leas y medites por tu cuenta.</description></item><item><title>Recursos para aprender Criptografía en 2022</title><link>https://blog.thedojo.mx/2021/12/08/recursos-para-aprender-criptograf%C3%ADa-en-2022/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/08/recursos-para-aprender-criptograf%C3%ADa-en-2022/</guid><description>La criptografía es un campo con mucha demanda laboral actualmente porque es importante para diferentes áreas de la informática. En este artículo vamos hablar su importancia y cómo puedes aprenderlo si está dentro de tus intereses.
La importancia de la criptografía En el artículo ¿Qué es la Criptografía? explicamos que es un conjunto de técnicas y conocimiento que busca ocultar la información, derivada de las matemáticas y las ciencias de la computación.</description></item><item><title>Generadores de números aleatorios y su importancia</title><link>https://blog.thedojo.mx/2021/12/07/generadores-de-n%C3%BAmeros-aleatorios-y-su-importancia/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/07/generadores-de-n%C3%BAmeros-aleatorios-y-su-importancia/</guid><description>Muy comúnmente los sistemas informáticos requieren de valores aleatorios para diferentes procesos, por ejemplo, para ordenar las cosas, para seleccionar elementos de un conjunto, para simulaciones, para tomar diferentes caminos en un proceso (como los videojuegos).
Un lugar en el que los valores aleatorios tienen una importancia especial es en criptografía y en la seguridad informática. De hecho, los números aleatorios están muy relacionados con la generación de valores usables en criptografía como llaves, por ejemplo.</description></item><item><title>¿Por qué deberías aprender TypeScript?</title><link>https://blog.thedojo.mx/2021/12/06/por-qu%C3%A9-deber%C3%ADas-aprender-typescript/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/06/por-qu%C3%A9-deber%C3%ADas-aprender-typescript/</guid><description>TypeScript es uno de los lenguajes que más ha sonado en los últimos años. En este artículo vamos a hablar de por qué es una buena idea que lo aprendas y las ventajas que te puede dar.
Acerca de TypeScript El propósito de TypeScript es tener un lenguaje adecuado para crear grandes sistemas que compile a JS. En realidad, todo programa válido en JS también es Válido en TypeScript. La principal diferencia que verás en TypeScript con respecto a JS es que este soporta anotaciones e inferencia de tipos de datos y los verifica en tiempo de compilación.</description></item><item><title>Entendiendo la cohesión y el acoplamiento en el software</title><link>https://blog.thedojo.mx/2021/12/05/entendiendo-la-cohesi%C3%B3n-y-el-acoplamiento-en-el-software/</link><pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/05/entendiendo-la-cohesi%C3%B3n-y-el-acoplamiento-en-el-software/</guid><description>Siempre se dice que una buena base de código tiene alta cohesión, pero bajo acoplamiento. ¿Cómo se puede entender esto? ¿Cómo podemos llevar este principio a la práctica?
En este artículo vamos a definir cada uno de esos términos de manera sencilla, y con ejemplos de cómo llegar a la aplicación real de estos términos.
Un poco de historia Estos dos conceptos y otros relacionados fueron desarrollados por Larry Constantine en la década de los 60&amp;rsquo;s y publicados en los años siguientes, junto con el nacimiento del diseño estructurado de sistemas.</description></item><item><title>Versiona mejor tu código: versionamiento semántico y commits convencionales</title><link>https://blog.thedojo.mx/2021/12/04/versiona-mejor-tu-c%C3%B3digo-versionamiento-sem%C3%A1ntico-y-commits-convencionales/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/04/versiona-mejor-tu-c%C3%B3digo-versionamiento-sem%C3%A1ntico-y-commits-convencionales/</guid><description>Una de las mejores cosas que podemos hacer por nosotros mismos y por nuestro equipo es versionar nuestro código y qué mejor que hacerlo de las mejores formas conocidas hasta el momento.
En este artículo hablaremos de dos cosas conectadas: el versionamiento semántico y los &amp;ldquo;commits convencionales&amp;rdquo;.
¿Por qué es importante? Organizar y manejar tu código de tal manera que puedas crear diferentes versiones del sistema que estás programando, cambiar entre ellas o regresar una anterior, es un requerimiento de todos los procesos de desarrollo actuales.</description></item><item><title>Algoritmos criptográficos: hashes seguros para alamcenar passwords</title><link>https://blog.thedojo.mx/2021/12/03/algoritmos-criptogr%C3%A1ficos-hashes-seguros-para-alamcenar-passwords/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/03/algoritmos-criptogr%C3%A1ficos-hashes-seguros-para-alamcenar-passwords/</guid><description>Una práctica común para solucionar la identificación de usuarios es registrarlos con su nombre de usuario y contraseña. Para no almacenar su contraseña directamente, es una costumbre hashearla. Como aprendiste en el artículo anterior, un hash es una función que impide recuperar el valor original ya que simplemente la información se pierde.
Los hashes seguros hacen casi imposible encontrar una colisión (que dos passwords te devuelvan un mismo hash), por lo que parecerían una buena solución para crear un valor único para cada usuario.</description></item><item><title>Algoritmos criptográficos: ¿Qué es un Hash?</title><link>https://blog.thedojo.mx/2021/12/02/algoritmos-criptogr%C3%A1ficos-qu%C3%A9-es-un-hash/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/02/algoritmos-criptogr%C3%A1ficos-qu%C3%A9-es-un-hash/</guid><description>Dentro del mundo del desarrollo se escucha bastante sobre funciones hash y, en realidad, se usan para múltiples cosas. En este artículo vamos a hablar de lo que es una función hash, los diferentes tipos que hay y cómo pueden servirte para desarrollar software.
¿Qué es un función hash? La idea y el nombre de un función hash viene de la cocina: hash se traduce literalmente como &amp;ldquo;picadillo&amp;rdquo;, y se usa precisamente porque eso hace una función hash con los datos que le pasemos.</description></item><item><title>20 bibliotecas de Python que deberías estar usando</title><link>https://blog.thedojo.mx/2021/12/01/20-bibliotecas-de-python-que-deber%C3%ADas-estar-usando/</link><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/12/01/20-bibliotecas-de-python-que-deber%C3%ADas-estar-usando/</guid><description>El libro &amp;ldquo;20 Python Libraries You Aren&amp;rsquo;t Using (But Should)&amp;rdquo; de Caleb Hattingh es un lectura corta que recomienda bibliotecas de Python muy útiles que pueden ayudarte a desarrollar software de manera más efectiva y rápida.
{: .align-center}
Veamos las 5 que me parece más importante conocer y tú puedes leer el libro para ver el detalle y entender las otras 15.
En la biblioteca estándar de Python Estas bibliotecas no las tendrás que instalar porque vienen con todas las instalaciones normales de Python, pero son poco usadas.</description></item><item><title>La Importancia de los Estándares de Código</title><link>https://blog.thedojo.mx/2021/10/05/la-importancia-de-los-est%C3%A1ndares-de-c%C3%B3digo/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/10/05/la-importancia-de-los-est%C3%A1ndares-de-c%C3%B3digo/</guid><description>Los estándares se encuentran constantemente presentes en nuestra vida cotidiana, son importantes para mantener un cierto orden en las cosas. La Ingeniería de Software no es una excepción a la regla, por lo tanto, los estándares de código son un requisito básico para los sistemas de calidad.
Para las organizaciones de nuestra época, el correcto funcionamiento de sus aplicaciones digitales representa crecimiento. Si eres parte de un equipo que aún no se preocupa por esto, te invitó a seguir leyendo y conocer las ventajas de esta práctica para que asi puedas considerar utilizarla en un futuro.</description></item><item><title>Como transmitir conocimiento en el desarrollo de software</title><link>https://blog.thedojo.mx/2021/07/19/como-transmitir-conocimiento-en-el-desarrollo-de-software/</link><pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/07/19/como-transmitir-conocimiento-en-el-desarrollo-de-software/</guid><description>Desarrollar software es una de las cosas que están basadas completamente en el conocimiento que tenemos sobre lo que estamos programando.
La charla &amp;ldquo;Eloquent Explanations&amp;rdquo; de Russ Olsen. En ella se proponen 5 puntos para darnos a entender cuando compartimos conocimiento con nuestro equipo u otras personas. Aquí te resumo lo que aprendí.
La motivación Primeramente hablemos de la motivación para explicar mejor las cosas: lo que nos limita para construir software es conocimiento.</description></item><item><title>Desarrolladores de los que puedes aprender: Russ Olsen</title><link>https://blog.thedojo.mx/2021/07/14/desarrolladores-de-los-que-puedes-aprender-russ-olsen/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/07/14/desarrolladores-de-los-que-puedes-aprender-russ-olsen/</guid><description>En este capítulo vamos a Hablar de Russ Olsen, un desarrollador ahora de Clojure, pero bastante reconocido en el mundo de Ruby. Ha escrito varios libros y contribuye activamente a la comunidad mediante podcasts, presentaciones y charlas.
Acerca de Russ Russ trabaja como vicepresidente de Cognitec, la empresa que está detrás de Clojure. Ha participado en proyectos que parecen bastante complejos, su Github muestra creación de compiladores, marshalling y otras cosas interesantes.</description></item><item><title>Desarrolladores de los que puedes aprender: Kevlin Henney</title><link>https://blog.thedojo.mx/2021/07/07/desarrolladores-de-los-que-puedes-aprender-kevlin-henney/</link><pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/07/07/desarrolladores-de-los-que-puedes-aprender-kevlin-henney/</guid><description>Hay varios desarrolladores de talla internacional de los que puedes aprender mucho, que creemos que no tienen la suficiente exposición, sobre todo en America Latina. Es por eso que estamos creando una serie de artículos y videos en la que resaltaremos la trayectoria, forma de pensar, pláticas y cosas que puedes aprender.
Las condiciones para que aparezcan aquí son las siguientes:
Amplia experiencia real desarrollando sistemas Que tengan algún logro notable en el desarrollo de sistemas Comparten sus ideas con la comunidad de forma continua No son unos &amp;ldquo;brilliant jerks&amp;rdquo;, es decir, no usan su experiencia o inteligencia para humillar o desacreditar a otros, y mucho menos su exposición para promover ideas nocivas.</description></item><item><title>Lo que debes saber sobre propiedad intelectual como desarrollador de software</title><link>https://blog.thedojo.mx/2021/06/22/lo-que-debes-saber-sobre-propiedad-intelectual-como-desarrollador-de-software/</link><pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/06/22/lo-que-debes-saber-sobre-propiedad-intelectual-como-desarrollador-de-software/</guid><description>Programar es una cosa, desarrollar software algo completamente diferente, sobre todo en un ambiente comercial en el que tienes que tratar con clientes y patrones. En este entorno tienes que entender otras cosas como la forma de colaborar con ellos, los precios y algo muy importante: las leyes.
En este artículo vamos a hacer un resumen de las cosas que platicamos con Cynthia Romero y con Conde en la plática &amp;ldquo;Todo lo que debes saber acerca de propiedad intelectual como creador de Software&amp;rdquo;.</description></item><item><title>Fuentes no convencionales de aprendizaje</title><link>https://blog.thedojo.mx/2021/06/14/fuentes-no-convencionales-de-aprendizaje/</link><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/06/14/fuentes-no-convencionales-de-aprendizaje/</guid><description>Cada quien tiene su forma de aprender. A algunas personas les funcionan mejor formas visuales y no convencionales. En este artículo te vamos a presentar algunos de los recursos que hemos encontrado que explican ideas y temas relacionados con la programación con un formato no convencional.
Te lo explico con gatitos Bel Rey, una programadora de Argentina (con la que tenemos una entrevista) crea explicaciones estilo comics usando gatitos para embellecer y hacer divertidas las explicaciones.</description></item><item><title>Recursos para aprender diseño de sistemas</title><link>https://blog.thedojo.mx/2021/03/29/recursos-para-aprender-dise%C3%B1o-de-sistemas/</link><pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/03/29/recursos-para-aprender-dise%C3%B1o-de-sistemas/</guid><description>El diseño de sistemas es un tema recurrente en entrevistas para desarrolladores de software, sobre todo para los niveles que requieren más experiencia, pero más allá de eso, es una habilidad fundamental a dominar si quieres avanzar en tu carrera.
Es por eso que vamos a empezar a hablar más de ese tema, contando nuestra experiencia, pero al mismo tiempo aprendiendo a diseñar mejor.
En este post hablaremos de algunos recursos con los que puedes empezar a aprender.</description></item><item><title>Intro a Machine Learning: Entendiendo el perceptrón</title><link>https://blog.thedojo.mx/2021/03/25/intro-a-machine-learning-entendiendo-el-perceptr%C3%B3n/</link><pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/03/25/intro-a-machine-learning-entendiendo-el-perceptr%C3%B3n/</guid><description>Hablar de aprendizaje automático y los términos que lo rodean, muchas veces intimida a los desarrolladores. En esta serie de posts vamos a intentar explicar los conceptos detrás del aprendizaje automático y llevarlos a la práctica.
Acerca de los nombres de las cosas Antes de empezar a hablar de inteligencia artificial, aprendizaje automático, aprendizaje profundo y todas esas cosas, queremos hacer una nota sobre el nombrado en las asuntos de tecnología.</description></item><item><title>Las bases matemáticas de la programación funcional</title><link>https://blog.thedojo.mx/2021/03/18/las-bases-matem%C3%A1ticas-de-la-programaci%C3%B3n-funcional/</link><pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/03/18/las-bases-matem%C3%A1ticas-de-la-programaci%C3%B3n-funcional/</guid><description>La programación funcional tiene conceptos muy relacionados con las matemáticas. Aquí te vamos a platicar de sus orígenes y de algunos conceptos matemáticos directamente embebidos en la programación funcional.
Lo primero que tienes que recordar es que las matemáticas no tienen que ver necesariamente con números, sino con el razonamiento y la formalización de este. En este artículo hablamos más de ello: Las matemáticas que necesitas para programar.
Ahora sí, empecemos con lo más fundamental de las matemáticas que soportan la programación funcional, no sin mencionar que podemos afirmar que la programación funcional es una forma de matemáticas.</description></item><item><title>Ruta de aprendizaje: Deep Learning</title><link>https://blog.thedojo.mx/2021/03/06/ruta-de-aprendizaje-deep-learning/</link><pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/03/06/ruta-de-aprendizaje-deep-learning/</guid><description>Inspirado en el libro &amp;ldquo;Ultralearning&amp;rdquo; de Scott Young, voy hacer un proyecto de aprendizaje de algo que llama mi atención desde hace mucho: Deep Learning y Machine Learning en general. Si no conces el concepto, te invito leer el post aquí: Ultralearning: el arte del aprendizaje profundo.
En esta serie documentaremos las diferentes fases. Este primer post trata sobre los recursos que usaré para aprender. Si tienes alguna sugerencia, ¡todas son bienvenidas!</description></item><item><title>Resumen: Qué hacer para conseguir un buen trabajo como programador</title><link>https://blog.thedojo.mx/2021/02/10/resumen-qu%C3%A9-hacer-para-conseguir-un-buen-trabajo-como-programador/</link><pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/02/10/resumen-qu%C3%A9-hacer-para-conseguir-un-buen-trabajo-como-programador/</guid><description>Aquí te damos un resumen de la plática que tuvimos con Diego De Granda y Pablo Trinidad sobre algunas cosas que hicieron para conseguir buenos trabajos. Esbozaremos algunos de los consejos independientes sin una secuencia definida.
Aprende Inglés Aunque la razón de existencia de este blog y de The Dojo MX en general es generar contenido en español para ayudar a los hispanohablantes, nunca nos cansaremos (y tampoco nuestros invitados) de darte el mismo consejo: APRENDE INGLÉS.</description></item><item><title>Libros que te ayudarán a aprender Data Science</title><link>https://blog.thedojo.mx/2021/02/01/libros-que-te-ayudar%C3%A1n-a-aprender-data-science/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2021/02/01/libros-que-te-ayudar%C3%A1n-a-aprender-data-science/</guid><description>Creemos firmemente que una de las mejores maneras de educarte como desarrollador es conseguir guía clara.
Una de las mejores fuentes de conocimiento son los libros escritos por personas expertas en el tema del que quieres aprender, es por eso siempre buscamos personas que nos den consejos sobre los mejores recursos que encuentren.
En esta ocasión invitamos a Yesi Days a platicar sobre qué libros nos recomendaría para desarrollarte en data science.</description></item><item><title>¿Deberías comentar tu código?</title><link>https://blog.thedojo.mx/2020/12/30/deber%C3%ADas-comentar-tu-c%C3%B3digo/</link><pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/12/30/deber%C3%ADas-comentar-tu-c%C3%B3digo/</guid><description>Cuando hablamos de los comentarios en el código, hay dos escuelas. La primera dice que debes usar los comentarios para clarificar lo que quisiste expresar con tu código, mientras que la segunda dice que deberías evitarlos al máximo y que comentar tu código es un mal necesario que sólo denota tu falta de habilidad para no hacer código lo suficientemente claro.
¿A cuál de los dos consejos deberías hacerle caso? En este artículo explicaremos por qué creemos que deberías ver los comentarios como una herramienta necesaria, valiosa y muy útil, y cómo usarlos para no caer en el extremo que ha llevado a algunas personas a tener una mala actitud hacia ellos.</description></item><item><title>¿Qué son los modelos generativos?</title><link>https://blog.thedojo.mx/2020/12/30/qu%C3%A9-son-los-modelos-generativos/</link><pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/12/30/qu%C3%A9-son-los-modelos-generativos/</guid><description>Los modelos generativos permiten a una máquina &amp;ldquo;aprender&amp;rdquo; los patrones que existen en los datos con los que son entrenadas y a partir de dicho aprendizaje, son capaces de generar datos similares que en algunos casos pueden ser casi tan &amp;ldquo;reales&amp;rdquo; como los que se utilizaron inicialmente para su entrenamiento.
Mediante este tipo de modelos pueden generarse nuevos datos que tienen distintas aplicaciones, entre ellas, generar datos que otros sistemas de aprendizaje podrán utilizar para su entrenamiento, sin necesidad de que dichos datos existan previamente.</description></item><item><title>Tipos de algoritmos criptográficos: cifrados de bloque</title><link>https://blog.thedojo.mx/2020/12/03/tipos-de-algoritmos-criptogr%C3%A1ficos-cifrados-de-bloque/</link><pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/12/03/tipos-de-algoritmos-criptogr%C3%A1ficos-cifrados-de-bloque/</guid><description>Ya hablamos de lo que es la criptografía, ahora empecemos a hablar de los tipos de algoritmos criptográficos que existen, sus características y sus principales diferencias. En este artículo hablaremos de los cifrados de bloque.
¿Qué es un cifrado de bloque? Los cifrados de bloque trabajan sobre un conjunto de bits de tamaño fijo, produciendo un texto cifrado del mismo tamaño. Para cifrar datos de tamaño arbitrario como sucede en la vida real, se utiliza el algoritmo de cifrado de bloque combinado con diferentes técnicas llamadas Modos de Operación.</description></item><item><title>Orígenes de la deuda técnica</title><link>https://blog.thedojo.mx/2020/10/19/or%C3%ADgenes-de-la-deuda-t%C3%A9cnica/</link><pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/10/19/or%C3%ADgenes-de-la-deuda-t%C3%A9cnica/</guid><description>Tuvimos una plática con Sagrario Meneses sobre la deuda técnica y cómo podemos atacarla. En este artículo te presentamos un pequeño resumen de lo que es y algunas sugerencias sobre su manejo.
¿Qué es la deuda técnica? La definición corta de deuda técnica es: todo aquello que hace que el software sea más difícil de producir y desarrollar.
La deuda técnica es invisible para los miembros no directamente relacionados con el desarrollo del proyecto; para los que participan en ellos no siempre es fácil de ver.</description></item><item><title>Algunas ideas sobre la resolución de problemas</title><link>https://blog.thedojo.mx/2020/10/04/algunas-ideas-sobre-la-resoluci%C3%B3n-de-problemas/</link><pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/10/04/algunas-ideas-sobre-la-resoluci%C3%B3n-de-problemas/</guid><description>En este artículo veremos algunas de las ideas que George Polya presenta en su libro How to Solve It sobre la resolución de problemas.
Estas ideas son sacadas del apartado &amp;ldquo;Aforismos y citas&amp;rdquo;, esperemos que pueda ayudar mejorar tus habilidades de resolución de problemas o que te saque del bache si te encuentras en uno.
Cada subtítulo es una frase que consideramos que vale la pena analizar más detalladamente.
Piensa en el fin antes de que empieces El tonto mira el principio, pero el sabio mira el final.</description></item><item><title>Formas de hacer una API con Go</title><link>https://blog.thedojo.mx/2020/09/20/formas-de-hacer-una-api-con-go/</link><pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/09/20/formas-de-hacer-una-api-con-go/</guid><description>Go es uno de los lenguajes modernos más usados. Ya hablamos de por qué deberías aprenderlo.
Ahora hablemos de un caso de uso práctico: úsalo para crear una API HTTP. En este artículo nos enfocaremos en la parte de comunicación HTTP y la generación de respuestas adecuadas.
La funcionalidad básica de tu API puede o no adaptarse completamente a Go (no es es tan fácil de escribir como un lenguaje dinámico como Python), pero definitivamente es un lenguaje excelente para crear interfaces de comunicación web, debido a su alto rendimiento y eficiencia.</description></item><item><title>No hagas hagas DevOps por convivir</title><link>https://blog.thedojo.mx/2020/09/10/no-hagas-hagas-devops-por-convivir/</link><pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/09/10/no-hagas-hagas-devops-por-convivir/</guid><description>Tuvimos una plática con Domingo Suárez(@domix) acerca de diferentes temas que le interesan a los desarrolladores.
En este artículo te vamos a dar un resumen.
Cómo nos dejamos influir para adoptar una tecnología Lo primero de lo que hablamos es de la forma en que muchas veces adoptamos la tecnología: por moda. A veces es porque alguien con autoridad la mencionó o muchos miembros de la comunidad la están usando. A los desarrolladores nos gustan las cosas brillantes.</description></item><item><title>A Philosophy of Software Design: Organiza bien los sistemas en capas</title><link>https://blog.thedojo.mx/2020/09/01/a-philosophy-of-software-design-organiza-bien-los-sistemas-en-capas/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/09/01/a-philosophy-of-software-design-organiza-bien-los-sistemas-en-capas/</guid><description>Hemos escuchado muchísimo acerca de los sistemas en capas como Modelo-Vista-Controlador, Modelo-Vista-Template, Modelo-Vista-*, MV-lo-que-sea etc. y eso es porque la mayoría de los sistemas actuales se organiza así: en capas. Además, nuestros módulos se dividen naturalmente en capas con diferentes funciones (como código que usa a otro).
Hablemos de por qué es efectiva esta forma de organización (o patrón de arquitectura) de código, de sus características y cómo podemos aprovecharla para sacar el máximo provecho.</description></item><item><title>Traducción automática: API's vs tu propio modelo</title><link>https://blog.thedojo.mx/2020/07/19/traducci%C3%B3n-autom%C3%A1tica-apis-vs-tu-propio-modelo/</link><pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/07/19/traducci%C3%B3n-autom%C3%A1tica-apis-vs-tu-propio-modelo/</guid><description>Traducir texto es una tarea frecuente y que puede realizarse de diferentes maneras, en este artículo queremos explorar algunas de ellas.
Existen sitios donde la traducción puede hacerse en línea, como en Google Translate, sin embargo, en muchos casos existe un límite en la cantidad de texto que puedes traducir.
También puedes utilizar APIs que pueden ayudarte a hacer dicho trabajo, dichas APIs también tiene límites por traducción.
Una solución que nos resulta interesante es la traducción utilizando algún modelo de Aprendizaje de Máquina que ya haya sido previamente entrenado.</description></item><item><title>De Bash a Zsh</title><link>https://blog.thedojo.mx/2020/07/16/de-bash-a-zsh/</link><pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/07/16/de-bash-a-zsh/</guid><description>Con la reciente liberación de MacOS Catalina, Apple anunció que entre alguno de los cambios al sistema operativo, se utilizará a partir de esta versión un nuevo shell que de manera regular se utilizaba en la app Terminal y en otras aplicaciones utilizadas por los desarrolladores para interactuar con la Mac a través de la línea de comandos.
El shell que se utilizaba previo a esta versión era Bash (Bourne Again Shell) y el que se utilizará ahora es Zsh.</description></item><item><title>Recursos para aprender Arquitectura de Software</title><link>https://blog.thedojo.mx/2020/07/15/recursos-para-aprender-arquitectura-de-software/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/07/15/recursos-para-aprender-arquitectura-de-software/</guid><description>Tuvimos una plática con Agustín Ramos acerca de la arquitectura de software y lo que debes aprender para practicarla. Este pequeño artículo incluye nuestro resumen y las recomendaciones de Agustín.
¿Qué es la arquitectura de software? La arquitectura del software incluye el diseño del sistema a alto nivel: la descomposición del sistema en módulos, la descripción de las responsabilidades de cada uno y sus relaciones.
También incluye las prácticas y herramientas que permitirán que el proyecto cumpla con los atributos de calidad o requerimientos no funcionales.</description></item><item><title>¿Qué es el pensamiento computacional?</title><link>https://blog.thedojo.mx/2020/07/09/qu%C3%A9-es-el-pensamiento-computacional/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/07/09/qu%C3%A9-es-el-pensamiento-computacional/</guid><description>Todo lo relacionado con el pensamiento computacional (la programación, la inteligencia artificial, las computadoras) ha estado muy presente en la mente de la sociedad, porque vivimos en un mundo en el que cada aspecto de la vida se ha visto influenciado por lo que la computación permite.
En varios lugares del mundo se ha pensado que se debe agregar el pensamiento computacional a la educación básica que todos reciben, bajo la promesa de que mejorará en general la capacidad de pensar y resolver problemas.</description></item><item><title>¿Qué es un engine de JavaScript?</title><link>https://blog.thedojo.mx/2020/05/17/qu%C3%A9-es-un-engine-de-javascript/</link><pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/05/17/qu%C3%A9-es-un-engine-de-javascript/</guid><description>Me llamó mucho la atención la salida de Deno v1 esta semana y le quise echar un ojito. Pero desde la explicación que da inicialmente, no entiendo exactamente lo que es y hace:
&amp;ldquo;Deno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 and is built in Rust.&amp;rdquo;
Aquí me surgió la pregunta: ¿Qué es un runtime para JavaScript?
Pero para contestarla, antes tengo que entender qué es V8.</description></item><item><title>Cursos certificados gratuitos</title><link>https://blog.thedojo.mx/2020/05/16/cursos-certificados-gratuitos/</link><pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/05/16/cursos-certificados-gratuitos/</guid><description>Debido a la emergencia sanitaria mundial, algunas universidades han liberado cursos que además de auditar, puedes cursar para obtener un certificado. Si quieres mejorar un poco tu perfil del LinkedIn aquí te ponemos unos cursos de tecnología que puedes tomar.
Programación Computer Programming For Everyone
C++ For C Programmers
Code Yourself! An introduction to Programming
Build Your First Android App
¡A Programar! Una introducción a la programación
Robótica (para niños)</description></item><item><title>Entendiendo ES6</title><link>https://blog.thedojo.mx/2020/04/27/entendiendo-es6/</link><pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/04/27/entendiendo-es6/</guid><description>Hace tiempo dimos un curso de ES6 o ES2015. Hicimos una investigación acerca de la historia, la nomenclatura, quién lo creo y porque tanta confusión con los nombres.
En este video explicamos eso y más: las características principales que se agregaron y la diferencia entre JavaScript y ECMAScript.
¿Tienes dudas específicas de JavaScript? Compártelas en los comentarios e intentaremos hacer videos sobre eso.</description></item><item><title>A Philosophy of Software Design: Crea módulos de propósito general</title><link>https://blog.thedojo.mx/2020/04/02/a-philosophy-of-software-design-crea-m%C3%B3dulos-de-prop%C3%B3sito-general/</link><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/04/02/a-philosophy-of-software-design-crea-m%C3%B3dulos-de-prop%C3%B3sito-general/</guid><description>Una burla común hacia los programadores es que todo lo queremos hacer demasiado general. Nos piden una funcionalidad y en ese momento empezamos a pensar en todos los casos en los que podría ser usado en el universo.
Hay muchos consejos en contra de escribir código que abarque muchos casos. En este artículo vamos a hablar de las ventajas y desventajas de módulos de propósito general, es decir, vamos a hablar en contra de la sabiduría popular.</description></item><item><title>A Philosophy of Software Design: Recomendaciones de diseño modular</title><link>https://blog.thedojo.mx/2020/03/18/a-philosophy-of-software-design-recomendaciones-de-dise%C3%B1o-modular/</link><pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/03/18/a-philosophy-of-software-design-recomendaciones-de-dise%C3%B1o-modular/</guid><description>En los artículos anteriores hemos estado hablando de cómo evitar la complejidad mediante ocultar información.
En este daremos algunas recomendaciones más y hablaremos de cómo no llevar este principio al extremo.
Hablemos primero de consejos que te ayudarán a mantener oculta la información que debe de estarlo.
Exponer lo menos posible estructuras de datos Un error común cuando creamos un módulo es exponer las estructuras de datos internas hacia otros módulos.</description></item><item><title>A Philosophy of Software Design: Descomposición Temporal</title><link>https://blog.thedojo.mx/2020/03/16/a-philosophy-of-software-design-descomposici%C3%B3n-temporal/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/03/16/a-philosophy-of-software-design-descomposici%C3%B3n-temporal/</guid><description>En el artículo pasado hablamos de una forma de evitar una fuga de información, que consiste en encapsular una decisión de diseño en un módulo.
Otra forma de dejar escapar información no relevante para los usuarios de una pieza de software es mediante obligarlos a usarla siempre de la misma forma, con el mismo orden de operaciones reglas de operación implícita. Esto se llama descomposición temporal. Hablemos más de ella.</description></item><item><title>Guía para escoger tu stack: por qué deberías escoger tecnología aburrida</title><link>https://blog.thedojo.mx/2020/03/11/gu%C3%ADa-para-escoger-tu-stack-por-qu%C3%A9-deber%C3%ADas-escoger-tecnolog%C3%ADa-aburrida/</link><pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/03/11/gu%C3%ADa-para-escoger-tu-stack-por-qu%C3%A9-deber%C3%ADas-escoger-tecnolog%C3%ADa-aburrida/</guid><description>Este artículo está basado en la presentación Choose Boring Technology de Dan McKinley.
No hay nada que haga más feliz a un desarrollador que trabajar con el último de los frameworks, lenguaje de programación o herramienta que salió el mes pasado.
Este problema se incrementa si trabajas en web, específicamente en JavaScript, donde cada semana tenemos un framework nuevo.
Pero hacer esto puede llevar a tu empresa o producto al desastre, como ha pasado muchas veces.</description></item><item><title>A Philosophy of Software Design: Ocultar información</title><link>https://blog.thedojo.mx/2020/03/07/a-philosophy-of-software-design-ocultar-informaci%C3%B3n/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/03/07/a-philosophy-of-software-design-ocultar-informaci%C3%B3n/</guid><description>La idea básica es que cada módulo debería encapsular algunas piezas de conocimiento, que representen decisiones de diseño. - John Ousterhout
En el artículo anterior vimos por qué es bueno que los módulos sean profundos, es decir, oculten detalles de implementación y funcionalidades detrás de una interfaz lo más sencilla posible. En este y los siguientes artículos vamos a ver maneras prácticas de lograr esto, basado en ejemplos de &amp;ldquo;A Philosophy of Software Design&amp;rdquo;.</description></item><item><title>A Philosophy of Software Design: Los módulos deben ser profundos</title><link>https://blog.thedojo.mx/2020/03/02/a-philosophy-of-software-design-los-m%C3%B3dulos-deben-ser-profundos/</link><pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/03/02/a-philosophy-of-software-design-los-m%C3%B3dulos-deben-ser-profundos/</guid><description>Para reducir la complejidad de los programas es importante tener técnicas definidas. La primera que vamos a analizar es la organización y separación de código a alto nivel, es decir separación en módulos.
Por qué es importante la separación Antes de empezar a hablar de cómo deberíamos diseñar nuestros módulos hablemos de por qué es importante la separación.
La mejor forma de resolver un problema complejo es mediante la descomposición del problema en problemas más sencillos.</description></item><item><title>A Philosophy of Software Design: Tres formas de identificar la complejidad</title><link>https://blog.thedojo.mx/2020/02/26/a-philosophy-of-software-design-tres-formas-de-identificar-la-complejidad/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/02/26/a-philosophy-of-software-design-tres-formas-de-identificar-la-complejidad/</guid><description>&amp;ldquo;Controlar la complejidad es la esencia de la programación&amp;rdquo; - Brian W. Kernighan
Muchas mentes brillantes dedicadas al desarrollo de software han estado de acuerdo en que el principal problema al crear y mantener programas es el manejo de la complejidad.
Podemos decir que algo complejo es aquello que está compuesto por muchas piezas relacionadas entre ellas. Ousterhout lo define de manera práctica como todo aquello que hace que el software sea difícil de entender, escribir o mantener.</description></item><item><title>Eloquent JavaScript en Español</title><link>https://blog.thedojo.mx/2020/02/21/eloquent-javascript-en-espa%C3%B1ol/</link><pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/02/21/eloquent-javascript-en-espa%C3%B1ol/</guid><description>TL;DR: Estamos trabajando en una nueva traducción de Eloquent JavaScript al español, en su tercera edición. La puedes encontrar aquí: Eloquent JavaScript en Español. Está la versión en Eloquent JavaScript en Español en PDF, que actualizamos cada capítulo. Si quieres contribuir puedes ponerte de acuerdo a través de este foro o en GitHub.
Desde el 2015 intentamos empezar a traducir la 2da edición de Eloquent JavaScript. Puedes ver el post en Medium aquí: Traducción de Eloquent JavaScript al Español.</description></item><item><title>A Philosophy of Software Design: Desarrollo Táctico vs Estratégico</title><link>https://blog.thedojo.mx/2020/02/11/a-philosophy-of-software-design-desarrollo-t%C3%A1ctico-vs-estrat%C3%A9gico/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/02/11/a-philosophy-of-software-design-desarrollo-t%C3%A1ctico-vs-estrat%C3%A9gico/</guid><description>Cuando desarrollas software tienes dos actitudes para escoger: desarrollas de forma rápida y sucia (desarrollo táctico) o de forma ordenada, planeada y pensando en el futuro. Cada uno de estos tipos de desarrollo o filosofías de desarrollo tiene ventajas y desventajas. Pero veamos a más detalle de qué trata cada uno.
Desarrollo táctico Está caracterizado por la alta velocidad inicial con la que empiezas a desarrollar y crear las funciones de tu programa.</description></item><item><title>¿Qué es DevOps?</title><link>https://blog.thedojo.mx/2020/01/16/qu%C3%A9-es-devops/</link><pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/01/16/qu%C3%A9-es-devops/</guid><description>DevOps es un término de recientemente creación (2013) que representa un cultura de trabajo enfocada en resolver los problemas que han sido persistentes en la entrega y servicio en el área de productos tecnológicos.
En este artículo platicaremos qué significa y sus fundamentos.
Adelanto: DevOps no es un rol, una palabra mágica y mucho menos automatización de servidores.
¿Por qué importa? En las eras económicas anteriores, los negocios creaban valor moviendo átomos.</description></item><item><title>Recursos gratutitos para aprender a programar desde cero</title><link>https://blog.thedojo.mx/2019/12/29/recursos-gratutitos-para-aprender-a-programar-desde-cero/</link><pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/12/29/recursos-gratutitos-para-aprender-a-programar-desde-cero/</guid><description>¿Quieres aprender a programar y no sabes por dónde empezar?
En este artículo te daremos algunos recursos que puedes seguir para aprender a programar desde lo más básico hasta tener un conocimiento razonable de programación con el que podrías empezar a trabajar.
Motívate Es importante conocer las bases, pero para eso antes hay que tener motivación y mantenerla. Así que empecemos por algo que te mostrará el poder de la programación y de lo que puedes hacer con un poco de conocimiento.</description></item><item><title>Las matemáticas que debes saber para programar</title><link>https://blog.thedojo.mx/2019/12/25/las-matem%C3%A1ticas-que-debes-saber-para-programar/</link><pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/12/25/las-matem%C3%A1ticas-que-debes-saber-para-programar/</guid><description>Cuando se habla de matemáticas muchas personas prefieren cambiar de tema.
Pero las matemáticas son la base de muchas otras ciencias incluida la computación. Podríamos considerar las ciencias de la computación como una rama de las matemáticas, pero que ha evolucionado todavía más allá de ellas.
Para programar con eficacia no necesitas saber muchas matemáticas, con el entendimiento básico es suficiente. En este artículo hablaremos de aquello que debes dominar.</description></item><item><title>Formatos de marcado de texto que deberías aprender</title><link>https://blog.thedojo.mx/2019/12/20/formatos-de-marcado-de-texto-que-deber%C3%ADas-aprender/</link><pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/12/20/formatos-de-marcado-de-texto-que-deber%C3%ADas-aprender/</guid><description>Parte del trabajo de un desarrollador es crear documentos con un formato fácil de entender y agradable a la vista, para crear documentación, registrar decisiones, escribir manuales, etc. La forma común de hacerlos es un procesador de textos como Word o Google Docs, pero generalmente batallamos sobre todo con el formateo y embellecimiento de documento.
En este artículo te platicaré de tres alternativas que pueden hacer tu vida más fácil: Markdown, reStructuredText, AsciiDoc.</description></item><item><title>Inducción y Deducción para desarrolladores de software</title><link>https://blog.thedojo.mx/2019/12/14/inducci%C3%B3n-y-deducci%C3%B3n-para-desarrolladores-de-software/</link><pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/12/14/inducci%C3%B3n-y-deducci%C3%B3n-para-desarrolladores-de-software/</guid><description>Este es el tercer artículo acerca del libro &amp;ldquo;How to Solve It&amp;rdquo; de George Polya. Puedes ver los dos artículos anteriores aquí:
Técnicas para resolver problemas Heurística Con este artículo cerraremos con las ideas que George Polya desarrolló para resolver problemas.
Deducción Tratar de resolver problemas por deducción significa aplicar principios o conocimiento general a un caso específico. Por ejemplo para un problema práctico en el que tenemos encontrar la longitud de un cable tensor para una antena, sabemos que podemos aplicar el teorema de Pitágoras.</description></item><item><title>Criptografía básica para programadores: ¿Qué es la criptografía?</title><link>https://blog.thedojo.mx/2019/11/12/criptograf%C3%ADa-b%C3%A1sica-para-programadores-qu%C3%A9-es-la-criptograf%C3%ADa/</link><pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/11/12/criptograf%C3%ADa-b%C3%A1sica-para-programadores-qu%C3%A9-es-la-criptograf%C3%ADa/</guid><description>Es muy común escuchar de &amp;ldquo;encriptación&amp;rdquo; (la palabra correcta en español es cifrado), llaves, algoritmos criptográficos y cosas parecidas, sobre todo con el surgimiento de Bitcoin y Blockchain.
Uno de los temas menos tratados por programadores de software común (para usuarios y sistemas que no impliquen el uso de seguridad a medida), es el correcto uso de los algoritmos criptográficos y muchas veces ni siquiera conocemos lo suficiente de ellos, sino que confiamos en lo que las herramientas pre-establecen (que gran parte de las veces fue diseñado por expertos y eso está bien).</description></item><item><title>Entendiendo REST: Servicios cacheables</title><link>https://blog.thedojo.mx/2019/10/27/entendiendo-rest-servicios-cacheables/</link><pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/10/27/entendiendo-rest-servicios-cacheables/</guid><description>La tercera característica que Thomas R. Fielding (Roy Fielding a partir de ahora) establece para los sistemas REST es la capacidad de que su información sea cacheable. Veamos lo que esto significa y por qué es una característica importante. Empecemos por definir el caché.
¿Qué es el caché? Originalmente el caché se refiere a un tipo especial de memoria muy rápida en los procesadores, que guarda temporalmente información que tiene gran probabilidad de volver a ser utilizada dentro de poco tiempo (en los procesadores hablamos de nano-segundos).</description></item><item><title>El arte de resolver problemas: la heurística</title><link>https://blog.thedojo.mx/2019/10/03/el-arte-de-resolver-problemas-la-heur%C3%ADstica/</link><pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/10/03/el-arte-de-resolver-problemas-la-heur%C3%ADstica/</guid><description>La heurística habla del comportamiento humano frente a los problemas. - George Polya
En un artículo anterior analizamos la estructura básica de un problema y la estructura de resolución que George Polya propone para intentar resolverlos.
Polya analiza a fondo la estructura del proceso de resolución de problemas. Aquí hablaremos de la heurística, de la que escribió en &amp;ldquo;How to solve it&amp;rdquo;{:target=&amp;quot;_blank&amp;quot;}, un compendio que pensó originalmente como un análisis de esta.</description></item><item><title>Técnicas para resolver problemas</title><link>https://blog.thedojo.mx/2019/09/27/t%C3%A9cnicas-para-resolver-problemas/</link><pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/09/27/t%C3%A9cnicas-para-resolver-problemas/</guid><description>Todos los desarrolladores nos hemos encontrado con problemas que nos dejan perplejos y que no tenemos idea de por dónde empezar a resolver.
George Polya fue uno de los matemáticos más prolíficos del Siglo XX, un matemático de primera clase (de esos que descubren e inventan cosas, y para algunos, el matemático más influyente del siglo) pero que, a diferencia de muchos otros, mantenía un interés por la educación y la enseñanza de las matemáticas, algo muy peculiar.</description></item><item><title>¿Por qué deberías aprender Go?</title><link>https://blog.thedojo.mx/2019/09/01/por-qu%C3%A9-deber%C3%ADas-aprender-go/</link><pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/09/01/por-qu%C3%A9-deber%C3%ADas-aprender-go/</guid><description>Go es eficiente, escalable y productivo. - Rob Pike
Go es un lenguaje popular por los rumores que hay acerca de él, como que es el lenguaje que va a matar a C, o que es muy muy rápido y poderoso. En este artículo vamos a hablar de qué cosas son ciertas y en qué casos te conviene aprender Go.
Empecemos hablando de cómo y por qué nació.
Historia de Go Go fue diseñado por Google para resolver sus problemas, y Google tiene grandes problemas.</description></item><item><title>Ultralearning: el arte del aprendizaje profundo</title><link>https://blog.thedojo.mx/2019/08/13/ultralearning-el-arte-del-aprendizaje-profundo/</link><pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/08/13/ultralearning-el-arte-del-aprendizaje-profundo/</guid><description>¿En qué te convertirías si aprendieras todo lo que deseas?
¿Cuántas cosas están en tu lista de aprendizaje? Todos tenemos una lista larga de temas, habilidades y curiosidades por aprender. Pero tenemos una cantidad igual de grande de obstáculos para lograrlo: la falta de acceso a recursos de aprendizaje, la falta de tiempo, falta de motivación, dificultad en estructura, entre muchas otras cosas.
Scott Young el autor de Ultralearning fue muy amable al proporcionarme una copia de revisión antes de que saliera el libro que ya está a la venta, y en este artículo quiero sintetizar las principales técnicas que enseña para que puedas lograr aprender mejor.</description></item><item><title>Entendiendo REST: conexión sin estado</title><link>https://blog.thedojo.mx/2019/08/03/entendiendo-rest-conexi%C3%B3n-sin-estado/</link><pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/08/03/entendiendo-rest-conexi%C3%B3n-sin-estado/</guid><description>Hemos venido hablando de las características que componen a un sistema REST. En el último artículo hablamos de la arquitectura cliente-servidor. Esta es la primera característica fundamental de un sistema REST. Ahora pasemos a la siguiente característica-limitante que Thomas Fielding establece para los sistemas REST: conexión sin estado.
¿Qué es el estado de un sistema? El estado de una aplicación son todos los datos que usa para operar en un momento determinado.</description></item><item><title>Entendiendo REST: Arquitectura cliente-servidor</title><link>https://blog.thedojo.mx/2019/07/04/entendiendo-rest-arquitectura-cliente-servidor/</link><pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/07/04/entendiendo-rest-arquitectura-cliente-servidor/</guid><description>El propósito de construir software no es crear una topología de interacciones específicas, o usar un tipo particular de componente; es crear un sistema que cumpla y exceda las necesidades de la aplicación. - Thomas Fielding
Ya hablamos de las motivaciones detrás del estilo arquitectural REST{:taget=blank}. Ahora empecemos con la primera de sus características o restricciones, que la empieza a definir: la arquitectura cliente-servidor.
¿Qué es la arquitectura cliente-servidor? Esta arquitectura de aplicación divide un sistema en dos componentes:</description></item><item><title>Libros gratuitos para aprender análisis de datos</title><link>https://blog.thedojo.mx/2019/06/22/libros-gratuitos-para-aprender-an%C3%A1lisis-de-datos/</link><pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/06/22/libros-gratuitos-para-aprender-an%C3%A1lisis-de-datos/</guid><description>¿Quieres aprender análisis de datos y ya eres programador? Los siguientes libros pueden ser de gran ayuda. Este post está basado en un artículo inglés que encontramos, pero con los recursos que recomienda actualizados y algunos otros de nuestra cosecha.
Casi todos están en inglés pero incluímos unos cuántos en español y, en los que nos fue posible, tienes descarga directa.
0. R en español Empecemos por los pocos recursos en español.</description></item><item><title>Entendiendo REST. El estilo de Arquitectura.</title><link>https://blog.thedojo.mx/2019/06/15/entendiendo-rest.-el-estilo-de-arquitectura./</link><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/06/15/entendiendo-rest.-el-estilo-de-arquitectura./</guid><description>En el artículo anterior de la serie hablamos un poco de lo que es una API REST. En este artículo empezaremos a ver qué es REST y por qué surgió.
Antes de empezar con lo nuestro, hablemos de lo que NO es una API REST.
Esto no es REST Actualmente, muchos desarrolladores (yo me contaba entre ellos), llaman API REST a cualquier servicio Web que corra sobre HTTP, sirva recursos (objetos o elementos que representan un objeto) o cosas parecidas y use JSON como lenguaje de transferencia de datos.</description></item><item><title>¿Por qué deberías aprender Elixir?</title><link>https://blog.thedojo.mx/2019/06/02/por-qu%C3%A9-deber%C3%ADas-aprender-elixir/</link><pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/06/02/por-qu%C3%A9-deber%C3%ADas-aprender-elixir/</guid><description>TL;DR ¿Por qué deberías considerar aprender Elixir? La respuesta fácil la encuentras en el siguiente gráfica y la plática de la que salió:
{: .align-center}
Este registro visual salió de esta plática:
Agradecemos a @loreniuxmr por la plática y a @alebricio por el registro visual, así como a Hack Tabasco por la organización.
¿Todavía no te convences? Entonces hablemos más profundamente. Elixir es un lenguaje de programación reciente (creado cerca de 2012), pero que está haciendo mucho ruido, aunque considerando que no tiene ninguno de los nombres legendarios del área de sistemas atrás ni a alguna empresa prominente.</description></item><item><title>Diseño y desarrollo de una API RESTful desde cero - La importancia de diseñar tu API</title><link>https://blog.thedojo.mx/2019/05/06/dise%C3%B1o-y-desarrollo-de-una-api-restful-desde-cero-la-importancia-de-dise%C3%B1ar-tu-api/</link><pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/05/06/dise%C3%B1o-y-desarrollo-de-una-api-restful-desde-cero-la-importancia-de-dise%C3%B1ar-tu-api/</guid><description>En este post explicaré los principios básicos de diseño de una API. Esta primera parte es bastante teórica, empezaremos con la práctica (no con la programación, sino con el diseño) en un post posterior.
Primero hablemos de la importancia del diseño o la arquitectura de la API. En la serie de posts hablaremos de API&amp;rsquo;s para consumo web, a través de HTTP, ya que son las de mayor uso y popularidad.</description></item><item><title>Las mejores fuentes tipográficas para programar</title><link>https://blog.thedojo.mx/2019/04/19/las-mejores-fuentes-tipogr%C3%A1ficas-para-programar/</link><pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/04/19/las-mejores-fuentes-tipogr%C3%A1ficas-para-programar/</guid><description>Personalizar el entorno de programación se ha convertido en uno de los temas más relevantes para los desarrolladores de software, nos permite ser más productivos y estar más contentos en general con el trabajo día a día. No dudo que el lugar en el que más pasamos tiempo los desarrolladores sea el editor de texto o IDE, y, por lo tanto, aprender a personalizarlo es bastante importante. Uno de los aspectos más importantes del editor de texto es la fuente tipográfica.</description></item><item><title>La diferencia entre concurrencia y paralelismo</title><link>https://blog.thedojo.mx/2019/04/17/la-diferencia-entre-concurrencia-y-paralelismo/</link><pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/04/17/la-diferencia-entre-concurrencia-y-paralelismo/</guid><description>Los términos concurrencia y paralelismo siempre han sido relevantes en el entorno de la computación y desarrollo de software. Hablemos de la diferencia entre ellos y cómo podemos aplicarlos en nuestros programas. Son conceptos relacionados, pero decir que uno es el otro es como decir que las naranjas y manzanas son iguales.
Empecemos por el concepto más sencillo: el paralelismo.
Paralelismo Se refiere a la ejecución simultánea de varios procesos computacionales.</description></item><item><title>Los mejores recursos para aprender programación funcional</title><link>https://blog.thedojo.mx/2019/04/06/los-mejores-recursos-para-aprender-programaci%C3%B3n-funcional/</link><pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/04/06/los-mejores-recursos-para-aprender-programaci%C3%B3n-funcional/</guid><description>En el articulo anterior hablamos de la programación funcional y por qué es importante. En este te daremos algunos recursos para que puedas iniciarte en ella.
Empezando ligero Empecemos con algunos recursos para entenderla y apreciarla mejor.
Russ Olsen tiene una plática en la que explica las bases y características principales de la programación funcional en 40 minutos de manera concisa y entretenida.
Las bases ¿Quieres aprender un poco de las bases de la programación funcional?</description></item><item><title>¿Qué es la programación funcional?</title><link>https://blog.thedojo.mx/2019/03/30/qu%C3%A9-es-la-programaci%C3%B3n-funcional/</link><pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/03/30/qu%C3%A9-es-la-programaci%C3%B3n-funcional/</guid><description>En los últimos años ha estado cobrando relevancia (de nuevo) la programación funcional. ¿Qué diferencias tiene con los estilos más usados? En este artículo hablaremos de sus dos caracterísitcas más distintivas y el tipo de programas que se pueden crear con ella.
Definición Se puede definir la programación funcional así:
Estilo de programación en el que se usan principalmente funciones puras y valores inmutables. En los lenguajes funcionales, todo es una expresión, es decir, todo tiene un valor inmutable.</description></item><item><title>Principios de Diseño de Software</title><link>https://blog.thedojo.mx/2019/03/19/principios-de-dise%C3%B1o-de-software/</link><pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/03/19/principios-de-dise%C3%B1o-de-software/</guid><description>En este artículo hablaremos primero de la importancia de aprender principios: qué son, qué ventajas tienen y cómo aplicarlos.
Hallarás una explicación básica de cada principio y su importancia, pero cada principio tendrá un post extenso explicando sus aplicaciones, forma de implementarlo y ejemplos prácticos, un sólo artículo no es suficiente para explicarlos cuando se podría escribir un libro sobre cada principio.
Ponle atención a los primeros dos 😉. Pero antes hablemos de lo que es un principio en general.</description></item><item><title>Tres formas de crear API's con Python</title><link>https://blog.thedojo.mx/2019/03/12/tres-formas-de-crear-apis-con-python/</link><pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/03/12/tres-formas-de-crear-apis-con-python/</guid><description>Es una tarea común para un desarrollador el diseñar e implementar una API web. Veremos tres herramientas para desarrollar tu API, de lo más sencillo a lo más completo: Hug, Flask y Django Rest Framework.
Hug Hug es una pequeña biblioteca para crear API&amp;rsquo;s muy fáciles de entender y mantener. Provee un serie de herramientas que permiten hacer tu API muy rápidamente, con poco código y siguiendo las mejores prácticas. Hug no es una biblioteca exclusiva para hacer API&amp;rsquo;s web, sino que se enfoca en permitirte crear API&amp;rsquo;s en el más amplio sentido de la palabra: una intefaz para permitir el uso automatizado (mediante código) de tu programa.</description></item><item><title>Producción y desarollo en Django</title><link>https://blog.thedojo.mx/2019/03/09/producci%C3%B3n-y-desarollo-en-django/</link><pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/03/09/producci%C3%B3n-y-desarollo-en-django/</guid><description>Para no salir herido al combinar desarrollo y producción en Django. Se usará Django &amp;gt;= 2.0
Se usará Python &amp;gt;= 3.6
Problemática Mientras desarrollaba en Django, me encontré con un problema, requería hacer múltiples pruebas con el ORM para generar consultas complejas a base de datos. Para hacer la prueba se ejecuta:
&amp;gt; python manage.py shell Con lo que se abrirá una consola de Python, en dicha consola se puede importar un modelo y con ese modelo hacer las pruebas requeridas.</description></item><item><title>La forma fácil de colaborar en The Dojo MX Blog</title><link>https://blog.thedojo.mx/2019/03/03/la-forma-f%C3%A1cil-de-colaborar-en-the-dojo-mx-blog/</link><pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/03/03/la-forma-f%C3%A1cil-de-colaborar-en-the-dojo-mx-blog/</guid><description>¿Quieres empezar a escribir? Contribuye con tus artículos a la comunidad. En este post encontrarás una guía detallada para la instalación del repositorio y ver tus posts de manera local, así como la convenciones que seguimos antes de publicar un post. Como verás, todo está por desarrolladores y para desarrolladores.
El único paso Si no quieres complicarte mucho la vida, has un fork del repositorio, y crea un archivo nombrado como YYYY-MM-DD-tu-titulo-como-slug.</description></item><item><title>Patrones de diseño: qué son y cuándo usarlos</title><link>https://blog.thedojo.mx/2019/02/23/patrones-de-dise%C3%B1o-qu%C3%A9-son-y-cu%C3%A1ndo-usarlos/</link><pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/02/23/patrones-de-dise%C3%B1o-qu%C3%A9-son-y-cu%C3%A1ndo-usarlos/</guid><description>Parte del conocimiento fundamental de un desarrollador profesional de software son los Patrones de diseño (Design Patterns). En este artículo explicamos de manera concisa:
Qué son De dónde vienen Por qué deberías aprender algunos cuantos Por dónde empezar Qué son los patrones de diseño &amp;ldquo;No hay nada nuevo bajo el sol&amp;rdquo;: es una conocida frase que quiere decir que gran parte de los problemas que la humanidad se ha enfrentado se siguen repitiendo vez tras vez.</description></item><item><title>Patrón de diseño: Cadena de responsabilidad</title><link>https://blog.thedojo.mx/2019/02/21/patr%C3%B3n-de-dise%C3%B1o-cadena-de-responsabilidad/</link><pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/02/21/patr%C3%B3n-de-dise%C3%B1o-cadena-de-responsabilidad/</guid><description>Propósito Asegurar el bajo acoplamiento entre un request y su receiver dando a múltiples objetos oportunidad de manejar el request
Hace unas semanas me enfrenté a un tema de procesar un mensaje de un usuario y darle tratamiento por medio de un algoritmo de Natrual Language Processing. Antes de pasar el mensaje por el set de algoritmos apropiados hay que darle una serie de tratamientos previos:
Eliminar los acentos y solo dejar en ASCII el mensaje.</description></item><item><title>Bienvenidos al Blog de The Dojo MX</title><link>https://blog.thedojo.mx/2018/10/28/bienvenidos-al-blog-de-the-dojo-mx/</link><pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2018/10/28/bienvenidos-al-blog-de-the-dojo-mx/</guid><description>Este es el primer post, esperamos que de muchos, del blog de The Dojo MX.
El objetivo de este blog es compartir información útil para los desarrolladores y contribuir al avance y desarrollo de los que nos dedicamos a hacer productos digitales.
Temática y enfoque Se tratarán todos los temas del amplio espectro que abarca desarrollar un producto de software, con un enfoque educativo. Algunos ejemplos de los tópicos a tratar son:</description></item></channel></rss>