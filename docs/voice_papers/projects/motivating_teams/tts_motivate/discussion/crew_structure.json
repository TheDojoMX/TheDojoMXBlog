{
  "project_name": "tts_motivate",
  "paper_title": "Evidence-Based Strategies for Motivating High-Performance",
  "language": "Spanish",
  "agents": [
    {
      "role": "Coordinator",
      "goal": "Coordinate the discussion and ensure all perspectives are heard",
      "backstory": "You are an experienced moderator who ensures productive discussions"
    },
    {
      "role": "Scientific Reviewer",
      "goal": "Verify the soundness and methodology of the paper",
      "backstory": "You are a rigorous scientist who evaluates research methodology and conclusions"
    },
    {
      "role": "Critical Thinker",
      "goal": "Question assumptions and challenge ideas presented",
      "backstory": "You are a skeptical academic who questions everything and looks for flaws"
    },
    {
      "role": "Educational Writer",
      "goal": "Create engaging educational content in the style of popular science educators",
      "backstory": "You are a skilled science communicator who explains complex topics in an accessible, engaging way like 3Blue1Brown or other popular educators"
    },
    {
      "role": "Voice Director",
      "goal": "Transform content into perfect voice-ready script for publication",
      "backstory": "You are a master voice coach and script editor who specializes in creating flawless, publication-ready scripts that voice actors can read naturally. You ensure every word flows perfectly when spoken aloud."
    },
    {
      "role": "AI Researcher",
      "goal": "Provide technical insights on AI methodology and implications",
      "backstory": "You are an AI researcher with deep technical knowledge"
    },
    {
      "role": "AI Philosopher",
      "goal": "Discuss philosophical implications of AI research",
      "backstory": "You are a philosopher specializing in AI ethics and implications"
    },
    {
      "role": "AI Doomer",
      "goal": "Raise concerns about potential risks and negative consequences",
      "backstory": "You are concerned about AI safety and potential existential risks"
    },
    {
      "role": "AI Enthusiast",
      "goal": "Highlight positive potential and applications",
      "backstory": "You are optimistic about AI's potential to solve problems"
    },
    {
      "role": "AI Newcomer",
      "goal": "Ask basic questions that others can answer",
      "backstory": "You know little about AI but are curious and ask good questions"
    }
  ],
  "tasks": [
    {
      "description": "\n            Analyze the synthesis of the paper titled \"Evidence-Based Strategies for Motivating High-Performance\" and provide your perspective.\n            \n            Paper synthesis:\n            TLDR:\n• High-performance software teams are built not by pushing extra hours, but by fostering psychological safety that meets deep intrinsic needs.\n• Empirical data—from Google's Project Aristotle to pair programming studies—demonstrate that environments nurturing autonomy, mastery, and purpose yield greater revenue, faster project completion, and lower burnout.\n• The piece shifts conventional management practices by emphasizing a learning culture, distributed authority, and structured experiments to transform teams from demotivated task-doers into engaged innovators.\n\nThe written work “Evidence-Based Strategies for Motivating High-Performance Software Teams” unfolds as a research-driven narrative that challenges traditional management’s reliance on pressure and extended hours. Instead, it centers on the idea that the true engine of high performance is psychological safety—a state where software engineers can admit mistakes, push boundaries, and learn from experimentation without fear. The text proceeds by grounding its arguments in robust empirical evidence, highlighting studies like Google’s Project Aristotle and Amy Edmondson’s work, and operationalizing theories such as Self-Determination Theory. Throughout, the work maintains a neutral, methodical tone, blending hard data with evidence-based practices and practical recommendations.\n\nWHAT:\n• The core idea is that technical excellence in software teams isn’t achieved by ramping up pressure or hours, but by shifting focus to the human elements that drive creativity and problem-solving. The narrative explains that intrinsic motivation flourishes in environments where autonomy, mastery, and purpose are prioritized—attributes substantiated by decades of research.\n• Detailed empirical evidence supports every claim: teams with high psychological safety see metrics like 17% more revenue and 32% faster project completions, while practices like pair programming reduce bugs by 15% (albeit at 15% more effort).\n• The written work also delves into the theoretical foundations of developer motivation via Self-Determination Theory, and explores the distinct nature of burnout and engagement, emphasizing that even engaged teams can suffer from systematic failures if psychological safety is missing.\n\nHOW:\n• The ideas are presented through a meticulous mix of empirical data, practical recommendations, and illustrative examples. The narrative transitions from diagnosing the problem—misaligned management practices and unmet psychological needs—to a series of actionable phases intended to rebuild team dynamics.\n• It layers quantitative data (such as performance metrics and defect reductions) with qualitative insights (like reframing challenges as “learning problems”), offering a structured implementation framework divided into phases.\n• The communication style is neutral and research-oriented, yet it manages to keep the reader engaged by continuously linking statistical findings with real-world practices like blameless post-mortems, daily check-ins, and collaborative programming sessions.\n\nWHY:\n• The purpose of the written work is to catalyze a shift in how software teams are managed, moving away from imposing pressure toward creating a culture where engineers are intellectually and emotionally engaged.\n• It argues that the well-being of software developers is the linchpin for sustainable, high-quality performance, and that a human-centered, evidence-based approach will lead to superior organizational outcomes.\n• By reframing failures as learning opportunities and emphasizing distributed decision-making, the work aims to build teams that are resilient, innovative, and ultimately more effective.\n\nWHO:\n• The text speaks primarily to leaders and managers in technology who grapple with challenges such as demotivation, burnout, and lack of ownership among software engineers. \n• Its voice is analytical and methodical, filled with detailed empirical references, yet it exudes a subtle call for empathetic leadership that acknowledges the human side of coding and problem-solving.\n• Intended for an audience that values both quantitative validation and practical, actionable strategies, the piece resonates with those looking to transform traditional management approaches in the tech industry.\n\nThe complete written work, preserving all the critical details and the author’s empirical, human-centered perspective, is as follows:\n\n“Evidence-Based Strategies for Motivating High-Performance\nSoftware Teams\nExecutive Summary\nYour team's challenges—capable but demotivated engineers lacking urgency and ownership while\nworking on uncertain projects—stem from fundamental misalignments between traditional\nmanagement approaches and the psychological needs of knowledge workers. Research across\nthousands of teams reveals that psychological safety serves as the foundational element enabling\nall other high-performance characteristics. Teams with high psychological safety achieve 17% more\nrevenue, 32% faster project completion, and significantly lower burnout rates. Psych Safety +5 The\nsolution isn't extending work hours or applying pressure, but creating environments where intrinsic\nmotivation flourishes through autonomy, mastery, and purpose—validated by 40+ years of motivation\nresearch and confirmed by modern studies like Google's Project Aristotle.\nYour experiments with autonomy, pair programming, and mob programming align with evidence-based\npractices, but their effectiveness depends on implementation context. Research shows pair\nprogramming reduces bugs by 15% while requiring 15% more effort— Tuple most effective for\ncomplex tasks. ResearchGate +2 Mob programming lacks rigorous empirical validation but shows\npromise for knowledge sharing and complex problem-solving. Ieee LinkedIn The key is creating a\nlearning-oriented culture where these practices serve team needs rather than becoming rigid\nprocesses.\nTheoretical Foundation: The Science of Developer Motivation\nIntrinsic motivation drives performance in complex cognitive work\nSelf-Determination Theory, validated across hundreds of studies, identifies three psychological needs\nthat predict developer satisfaction and performance. Nih Acm Autonomy—the need to feel volitional\nand self-directed—emerges as the strongest predictor of developer engagement. Wikipedia +2\nResearch by Beecham et al. analyzing 92 studies found that lack of control over technical decisions\nranks as a primary demotivator, Herts +2 while Chen et al. demonstrated that intrinsic\nawareness of knowledge value was the strongest predictor of knowledge sharing in software teams.\nEmerald\nCompetence manifests as the drive for technical mastery and continuous learning. Flow theory\nresearch shows programming naturally facilitates flow states when challenge levels match skills,\nexplaining why developers report highest satisfaction when solving appropriately difficult problems.\nPositivepsychology Wikipedia The third pillar, relatedness, creates team cohesion through shared\npurpose and belonging, though its importance varies between individualistic and collective\norientations. Wikipedia Richard Bown\nPink's synthesis of motivation research adds the critical element of purpose—connection to\nmeaningful outcomes. Daniel Pink +2 Open source contributions demonstrate how purpose-driven work\nsustains effort without external rewards. SpringerLink This aligns with findings that developers who\nunderstand their work's impact show higher engagement and lower turnover.\nBurnout epidemic reflects systematic organizational failures\nRecent research reveals 73-83% of developers experience burnout, with rates increasing during\nremote work transitions. IT Pro Usehaystack Beecham's systematic review identified six organizational\nrisk factors: work overload, lack of control, insufficient rewards, community breakdown, absence of\nfairness, and value conflicts. Software Work overload and unrealistic deadlines emerged as the\nmost cited cause (47%), followed by lack of autonomy and insufficient recognition. Usehaystack\nThe Job Demands-Resources Model explains this pattern: job demands (pressure, complexity) predict\nburnout, while job resources (autonomy, learning opportunities, support) predict engagement.\nCritically, engagement and burnout are distinct constructs, not opposites. Acm Teams can\nsimultaneously experience high engagement in their work while burning out from organizational\ndysfunction.\nPsychological safety enables all other performance factors\nAmy Edmondson's decades of research, validated by Google's Project Aristotle studying 180+ teams,\nestablishes psychological safety as the foundation for team effectiveness. Withgoogle +2 Teams with\nhigh psychological safety—where members feel safe taking interpersonal risks—show remarkable\nperformance differences: 17% higher revenue, 50% higher productivity, 32% faster project\ncompletion, and 76% more engagement. Google Business +5\nPsychological safety doesn't mean avoiding conflict or lowering standards. Rather, it creates\nenvironments where people can admit mistakes, ask questions, and challenge assumptions without\nfear of punishment or embarrassment. Withgoogle +2 Edmondson's research revealed that better\nteams don't make fewer mistakes—they're more willing to discuss them, enabling rapid learning and\nimprovement. Behavioral Scientist +3\nPractical Implementation Framework\nPhase 1: Establish psychological safety foundation (Months 1-2)\nBegin with leadership vulnerability. Research shows leaders who model fallibility and curiosity create\nsafer environments. Leading Sapiens Hbs Start team meetings with \"What did you learn this week?\"\nrather than status updates. Implement blameless post-mortems for all production issues, focusing on\nsystem improvements rather than individual fault. Hbs ACM Conferences Create explicit team\nworking agreements that normalize asking for help and admitting uncertainty.\nFrame all work as learning problems, not just execution tasks. When presenting challenges,\nacknowledge uncertainty explicitly: \"We're exploring new territory here, so we'll need to experiment\nand learn as we go.\" This reframing, validated across Edmondson's research, reduces performance\nanxiety while increasing innovation. Leading Sapiens\nIntroduce daily psychological safety practices. Brief check-ins asking \"What's one thing you're\nstruggling with?\" normalize vulnerability. Code reviews become collaborative learning sessions when\nframed as \"Let's explore different approaches\" rather than \"Find the bugs.\" Research shows these\nsmall, consistent practices build cumulative safety over time.\nPhase 2: Implement evidence-based team practices (Months 3-4)\nDeploy pair programming strategically based on empirical evidence. Laurie Williams' research\nshows pairs produce 15% fewer bugs with 15% more effort— Tuple optimize for quality on complex,\ncritical components. ResearchGate +2 For simpler tasks, research indicates solo work is more efficient.\nImplement rotation schedules (every 2-4 hours) to prevent fatigue and spread knowledge. Mixed skill\nlevels (expert-novice pairing) show greatest learning benefits. ResearchGate\nExperiment with mob programming for specific contexts. Despite limited empirical validation,\npractitioner reports suggest effectiveness for complex problem-solving, architectural decisions,\nand knowledge transfer. Ieee +2 Start with 2-hour sessions for critical design decisions, using 5-15 minute\nrotation intervals. Agile Alliance Monitor team energy and adjust—research indicates potential for fatigue\nwith extended sessions.\nTransition to collective code ownership gradually. Greek software company studies show this\nreduces bottlenecks and improves knowledge sharing but requires strong testing infrastructure.\nSpringerLink Begin with shared ownership within feature teams before expanding. Mandatory coding\nstandards and comprehensive automated testing mitigate risks of unfamiliar code modifications.\nAltexSoft LinkedIn\nPhase 3: Create sustainable urgency without pressure (Months 5-6)\nResearch on sustainable pace reveals overtime beyond one week decreases productivity while\nincreasing defects. Teams working excessive hours show 20-30% more bugs and declining velocity by\nweek three. Mountaingoatsoftware Instead, create urgency through purpose and priority clarity.\nImplement pull-based work systems where teams select tasks based on capacity rather than having\nwork pushed. ISBSG studies show teams larger than 9 people are significantly less productive—\nResearchGate keep teams at 5-9 members. ScienceDirect ScienceDirect Use visual work management\n(kanban boards) to create transparency without pressure.\nConnect all work to user impact and business value. Research shows developers with clear\nunderstanding of their work's purpose demonstrate higher intrinsic urgency. Regular demos to actual\nusers, customer feedback sessions, and impact metrics (not just velocity) create meaningful urgency\nwithout artificial deadlines.\nPhase 4: Develop ownership mindset through distributed authority (Ongoing)\nOwnership mindset emerges when developers have both responsibility for outcomes and authority to\nmake decisions. Gallup research shows only 14% of performance management systems inspire true\nownership. LEOCODE +3 Shift from task assignment to impact assignment: \"Your team owns search\nperformance\" rather than \"Implement these search features.\" Blueoceanbrain\nCreate clear decision-making frameworks using RACI matrices. Research shows distributed\ndecision-making improves both speed and quality when boundaries are explicit. Pmi ResearchGate\nTechnical decisions within defined architecture constraints belong to teams. Cross-team impacts\nrequire collaborative consensus. Strategic direction requires leadership input.\nImplement team-level metrics tied to business outcomes. Traditional individual metrics create\ncompetition; team metrics foster collaboration. Google's research found dependability (team members\ncompleting quality work) as the second-most important factor after psychological safety. Withgoogle +2\nMeasure outcomes (customer satisfaction, system reliability) not outputs (lines of code, story points).\nManaging Uncertainty in Experimental Projects\nLeverage Lean principles for innovation management\nMary and Tom Poppendieck's adaptation of Lean to software provides a framework particularly suited\nto experimental work. \"Decide as late as possible\" maintains options when requirements are unclear.\nWikipedia ScienceDirect Rather than premature optimization, explore multiple approaches\nsimultaneously through set-based development.\nResearch on estimation in uncertain projects by Jørgensen provides 12 evidence-based practices.\nMost critically: assess and communicate uncertainty explicitly, combine estimates from multiple\nexperts, and avoid pressure during estimation. Studies show sequence effects can cause 10-25%\nvariance—estimate components independently then integrate. ScienceDirect\nImplement rapid feedback loops for learning\nMultiple research streams converge on the importance of short feedback cycles. Agile methodologies\nshow 75% improvement in time-to-market with proper implementation. nTask Acm The Phoenix\nProject's \"Three Ways\" emphasize flow optimization, feedback amplification, and continuous learning.\nIT Revolution Technical practices enabling this include continuous integration (XP), automated testing\n(Lean), and frequent deployment (DevOps). AltexSoft\nFor experimental work, structure learning cycles explicitly. Each experiment needs clear hypothesis,\nsuccess metrics, and fixed timebox. Research shows iterative development reduces risk by enabling\n\"fast failure\"—problems discovered early cost exponentially less to fix. Hbs Mailchimp\nBalance experimentation with delivery commitments\nEvidence from multiple studies shows effective uncertainty management requires transparent\ncommunication with stakeholders. Research indicates only 25% of stakeholders fully commit to\nchange—the rest need continuous engagement. Pmi ScienceDirect Use prototyping and incremental\ndelivery to make progress visible while maintaining flexibility.\nTechnical debt research reveals teams spend average 25% of time managing past shortcuts.\nScienceDirect Wikipedia For experimental projects, explicitly track and plan \"learning debt\"—temporary\nsolutions that enable experimentation but require eventual resolution. Strategic technical debt\naccelerates learning when managed consciously. ArXiv\nProposed Experiments and Metrics\nExperiment 1: Psychological safety baseline and intervention\nWeeks 1-2: Measure current psychological safety using Edmondson's validated 7-item scale. Survey\nanonymously: \"If you make a mistake on this team, it is often held against you\" (reverse scored)\nthrough \"It is safe to take a risk on this team.\" Withgoogle Integral\nWeeks 3-12: Implement daily practices: learning-focused check-ins, failure celebrations for intelligent\nfailures, vulnerability modeling by leadership. Continue weekly pulse measurements.\nSuccess metrics: 20% improvement in psychological safety scores, increased experiment proposals,\nreduced time between failure and reporting.\nExperiment 2: Strategic pair programming deployment\nMonth 1: Categorize work by complexity and criticality. Assign pairing to high-complexity, highcriticality tasks only (estimated 30% of work).\nMonth 2-3: Track metrics: defect rates, development time, knowledge transfer (measured by reduced\nsingle points of failure), developer satisfaction. ScienceDirect +2\nSuccess criteria: 15% defect reduction on paired work, maintained or improved velocity, positive\ndeveloper feedback, measurable knowledge distribution. ScienceDirect\nExperiment 3: Pull-based work with team ownership\nSetup: Define 3-5 business outcomes owned by team (e. g., \"search response time under 200ms,\"\n\"checkout conversion rate above 85%\").\nImplementation: Teams pull work that advances their owned metrics. Weekly review of metric\nprogress, not task completion.\nMeasurement: Team velocity, outcome metrics, developer autonomy scores, stakeholder satisfaction.\nExperiment 4: Learning sprints for experimental work\nStructure: Alternate regular delivery sprints with explicit \"learning sprints\" for experimental work.\nLearning sprints have different success criteria: knowledge gained, hypotheses tested, directions\neliminated. Asana\nProcess: Pre-plan 3-5 experiments per learning sprint. Fixed timebox (2 days each). Document\nlearnings, not just code. Present findings to wider team.\nSuccess metrics: Innovation velocity (experiments per sprint), successful production innovations from\nexperiments, team engagement scores.\nConclusion: Building self-organizing excellence\nThe path from demotivated task-completers to engaged problem-solvers doesn't require longer hours\nor external pressure. Instead, it demands creating environments where developers' intrinsic drives for\nautonomy, mastery, and purpose align with organizational needs. sophilabs Your early experiments\nwith autonomy and collaborative programming demonstrate understanding of these principles—now\nsystematic implementation based on empirical evidence can unlock your team's full potential.\nStart with psychological safety as your foundation. Without safety to fail, experiment, and learn, no\nother practices will achieve their potential. Psych Safety +2 Build on this foundation with strategic use of\ncollaborative practices, distributed decision-making, and connection to meaningful outcomes.\nMeasure progress through both performance metrics and human factors—sustainable excellence\nrequires both. Scrum Scrum\nThe research is clear: software development is fundamentally human work. Geraldmweinberg +4\nOptimize for the humans, and technical excellence follows. sophilabs\n\nThis comprehensive synthesis not only preserves every critical insight and the original narrative’s factual rigor but also captures the work’s energetic push for a transformative, evidence-based approach to motivation in software teams.\n            \n            CRITICAL: ONLY CONVERSATION AGENTS participate in this analysis:\n            - Base agents (Coordinator, Scientific Reviewer, Critical Thinker)\n            - Specialized domain agents\n            \n            EXCLUDED FROM ANALYSIS: Educational Writer, Voice Director, and Comedy Communicator (all work in post-production)\n            \n            Each participating agent should:\n            1. Read and understand the paper from your specific role's perspective\n            2. Identify key points relevant to your expertise\n            3. Prepare questions or concerns to discuss\n            4. Consider the implications from your unique viewpoint\n            \n            SPECIALIZED AGENTS: Pay special attention to domain-specific aspects that only you can address.\n            \n            This should be a comprehensive TECHNICAL analysis where EVERY conversation agent contributes their specialized perspective.\n            \n            Language: Spanish\n            ",
      "expected_output": "Comprehensive technical analysis from conversation agents only (no post-production agents)",
      "agent_role": "Coordinator"
    },
    {
      "description": "\n                    SPECIALIZED AGENTS DEEP DIVE: Domain expertise from TECHNICAL conversation agents only.\n                    \n                    PARTICIPATING SPECIALIZED AGENTS (technical focus):\n                    - AI Researcher: Provide technical insights on AI methodology and implications, - AI Philosopher: Discuss philosophical implications of AI research, - AI Doomer: Raise concerns about potential risks and negative consequences, - AI Enthusiast: Highlight positive potential and applications, - AI Newcomer: Ask basic questions that others can answer\n                    \n                    EXCLUDED: Comedy Communicator (works in post-production phase)\n                    \n                    Each specialized agent should:\n                    1. Provide deep domain-specific insights about the paper\n                    2. Identify methodological issues specific to your field\n                    3. Highlight implications that only someone with your expertise would notice\n                    4. Suggest domain-specific improvements or alternative approaches\n                    5. Connect this work to other research in your specialized area\n                    \n                    This is YOUR moment to shine with specialized knowledge that the base agents cannot provide.\n                    Focus on TECHNICAL DEPTH and DOMAIN EXPERTISE.\n                    Format as a detailed specialist consultation with clear attribution to each expert.\n                    \n                    Language: Spanish\n                    ",
      "expected_output": "Deep technical specialist analysis from 5 domain experts",
      "agent_role": "AI Researcher"
    },
    {
      "description": "\n            Based on the initial analysis, conduct a DYNAMIC Q&A session where technical conversation agents ask each other specific questions about the paper synthesis.\n            \n            PARTICIPATING AGENTS (technical conversation only):\n            - Base conversation agents (Coordinator, Scientific Reviewer, Critical Thinker) \n            - ALL specialized domain agents\n            \n            EXCLUDED FROM CONVERSATION: Educational Writer, Voice Director, and Comedy Communicator (all work in post-production)\n            \n            Instructions for multi-agent technical conversation:\n            1. ALL TECHNICAL CONVERSATION AGENTS should ask pointed questions to other agents\n            2. SPECIALIZED AGENTS should ask domain-specific questions that challenge assumptions\n            3. BASE AGENTS should ask specialists to clarify complex domain concepts\n            4. Agents must respond to questions directed at them with detailed technical answers\n            5. Follow-up questions and clarifications are encouraged\n            6. Challenge each other's assumptions respectfully\n            7. Build on each other's ideas and insights\n            8. Create a natural back-and-forth technical dialogue\n            \n            SPECIALIZED AGENTS: This is crucial - ask questions only YOU would think to ask!\n            \n            Focus areas for technical questions:\n            - Domain-specific methodological concerns\n            - Interdisciplinary connections and conflicts\n            - Alternative interpretations from different expert perspectives\n            - Practical applications in each specialist's field\n            - Potential limitations or biases from multiple viewpoints\n            \n            Format this as a realistic TECHNICAL conversation with clear speaker identification for ALL conversation participants.\n            Keep the tone SERIOUS and TECHNICAL - humor will be added later in post-production.\n            \n            Language: Spanish\n            ",
      "expected_output": "Dynamic technical Q&A conversation between conversation agents only (no post-production or humor)",
      "agent_role": "Critical Thinker"
    },
    {
      "description": "\n            Organize a structured technical debate where conversation agents with different viewpoints engage in deeper discussion.\n            \n            PARTICIPATING AGENTS (technical conversation only):\n            - Base conversation agents (Coordinator, Scientific Reviewer, Critical Thinker)\n            - ALL specialized domain agents  \n            \n            EXCLUDED FROM DEBATE: Educational Writer, Voice Director, and Comedy Communicator (all work in post-production)\n            \n            Technical debate structure:\n            1. Present the main controversial points or interpretations from the paper\n            2. Have TECHNICAL CONVERSATION AGENTS take different positions and argue their cases\n            3. SPECIALIZED AGENTS: Argue from your domain expertise - what would your field say?\n            4. Allow for rebuttals and counter-arguments between different expert perspectives\n            5. Explore edge cases and hypothetical scenarios from multiple disciplinary angles\n            6. Find areas of agreement and persistent disagreements between different specialties\n            7. Synthesize different viewpoints into a richer technical understanding\n            \n            This should feel like a real interdisciplinary TECHNICAL conference where:\n            - Different specialists bring unique perspectives that sometimes conflict\n            - Domain experts interrupt each other (politely) to make field-specific points\n            - Ideas evolve through interaction between different areas of expertise\n            - New insights emerge from cross-disciplinary exchange\n            - There's intellectual tension between different specialist viewpoints\n            \n            SPECIALIZED AGENTS: Don't hold back - defend your field's perspective!\n            \n            Make it conversational and dynamic, but keep TECHNICAL FOCUS - humor will be added later.\n            \n            Language: Spanish\n            ",
      "expected_output": "Rich interdisciplinary technical debate between conversation agents only (no post-production or humor)",
      "agent_role": "Scientific Reviewer"
    },
    {
      "description": "\n            Conduct a collaborative synthesis where technical conversation agents work together to build a comprehensive understanding.\n            \n            PARTICIPATING AGENTS (technical conversation only):\n            - Base conversation agents (Coordinator, Scientific Reviewer, Critical Thinker)\n            - ALL specialized domain agents\n            \n            EXCLUDED FROM SYNTHESIS: Educational Writer, Voice Director, and Comedy Communicator (all work in post-production)\n            \n            Technical collaborative process:\n            1. ALL TECHNICAL CONVERSATION AGENTS contribute their key insights from the discussions\n            2. SPECIALIZED AGENTS highlight unique perspectives only your field can provide\n            3. Agents build on each other's contributions in real-time\n            4. Identify connections between different specialist perspectives\n            5. Resolve conflicting interpretations through interdisciplinary dialogue\n            6. Co-create new insights that emerge from cross-domain discussion\n            7. Establish consensus on the most important takeaways from ALL conversation perspectives\n            \n            This should be a generative TECHNICAL conversation where:\n            - Ideas from one specialist spark new ideas in other specialists\n            - The group intelligence exceeds individual specialist perspectives\n            - Agents actively listen and respond to insights from other domains\n            - The conversation flows naturally between different areas of expertise\n            - New understanding emerges from interdisciplinary interaction\n            - Each specialist's unique knowledge contributes to the whole\n            \n            SPECIALIZED AGENTS: Share insights that ONLY someone with your expertise would have!\n            \n            Format as natural TECHNICAL conversation with organic transitions between specialist viewpoints.\n            Keep SERIOUS and FOCUSED - entertainment will be added later in post-production.\n            \n            Language: Spanish\n            ",
      "expected_output": "Collaborative technical synthesis conversation from conversation agents only (no post-production or humor)",
      "agent_role": "Coordinator"
    },
    {
      "description": "\n            Based on all previous conversations and analyses, conduct a final comprehensive technical discussion that synthesizes insights from conversation agents.\n            \n            PARTICIPATING AGENTS (technical conversation only):\n            - Base conversation agents (Coordinator, Scientific Reviewer, Critical Thinker)\n            - ALL specialized domain agents\n            \n            EXCLUDED: Educational Writer, Voice Director, and Comedy Communicator (they will process this output in post-production)\n            \n            The final technical discussion should:\n            1. Synthesize insights from the Q&A, specialist deep dive, debate, and collaborative sessions\n            2. Cover all major points of the paper from multiple expert perspectives\n            3. Include the rich specialist perspectives developed through agent interactions\n            4. Address concerns and criticisms that emerged from different domains\n            5. Explore implications and applications discussed by various specialists\n            6. Be comprehensive and technically rigorous for expert audiences\n            7. Highlight unique insights that could ONLY come from having multiple specialist perspectives\n            \n            CRITICAL: This final technical discussion must incorporate:\n            - Domain-specific insights from ALL specialist conversation agents\n            - Cross-disciplinary connections discovered during discussions\n            - Unique perspectives that emerged from interdisciplinary dialogue\n            - Technical depth and rigor appropriate for expert audiences\n            \n            This is the FINAL technical conversation output that will be handed to the post-production team.\n            Make it comprehensive, rigorous, and rich with all the insights gathered.\n            Keep it TECHNICAL and SERIOUS - post-production will handle accessibility and entertainment.\n            \n            Language: Spanish\n            ",
      "expected_output": "Final comprehensive technical discussion ready for post-production processing",
      "agent_role": "Critical Thinker"
    },
    {
      "description": "\n            POST-PRODUCTION PHASE 2: EDUCATIONAL SCRIPT CREATION\n            \n            Transform ALL the rich content into a comprehensive educational lecture text.\n            \n            DOCUMENT TITLE: Evidence-Based Strategies for Motivating High-Performance\n            \n            You are receiving the complete output, which includes:\n            - Initial analysis from all conversation agents\n            - Specialized domain expert deep dive\n            - Dynamic Q&A sessions between experts\n            - Interdisciplinary technical debates\n            - Collaborative synthesis\n            - Final comprehensive technical discussion\n            \n            \n            Your job is to distill ALL this rich content into a single educator voice.\n            \n            The script should be in the style of popular science educators like 3Blue1Brown:\n            1. Written as a SINGLE EDUCATOR speaking directly to the listener (use \"tú\"/\"usted\")\n            2. CRITICAL INTRODUCTION STRUCTURE:\n               a) START with a HOOK - a question, surprising fact, or intriguing statement (NOT \"En resumen...\")\n               b) THEN naturally introduce the topic: \"Evidence-Based Strategies for Motivating High-Performance\" after engaging the listener\n               c) Examples of good hooks: \"¿Alguna vez te has preguntado...?\", \"Imagina por un momento...\", \"Hay algo sorprendente sobre...\"\n               d) NEVER start with: \"En resumen\", \"Hoy vamos a hablar de\", \"Este es un resumen de\"\n            3. Use analogies and accessible explanations\n            4. Include ALL key insights from the multiple conversations and specialist exchanges\n            5. Be engaging and educational, not just informative\n            6. Flow naturally from concept to concept with smooth transitions\n            7. Include moments of wonder and intellectual curiosity\n            8. Break down complex ideas into digestible parts\n            9. Use a teaching tone that makes the listener feel they're learning something fascinating\n            10. Write as continuous text ready to be read by a voice actor\n            11. NO section headers, NO subheaders, NO formatting marks\n            12. Don't address the public with greetings or goodbyes, but make questions\n            13. Always end up with questions for the reader and practical implications\n            14. Write as plain text that flows naturally for voice reading\n            15. NO [PAUSES], NO [MUSIC], NO stage directions - just the educational content\n            16. CRITICAL: Address the listener directly - \"puedes imaginar\", \"si consideras\", \"te darás cuenta\"\n            17. DO NOT write as if summarizing a discussion - write as if YOU are the teacher\n            18. Avoid phrases like \"los expertos discutieron\" or \"el equipo concluyó\"\n            19. Incorporate the depth and nuance that emerged from ALL agent conversations\n            \n            CRITICAL DIDACTIC TECHNIQUES - MANDATORY:\n            20. INTRODUCTION must include a compelling preview/roadmap: After the hook and title mention, preview what the listener will learn - \"En los próximos minutos vas a descubrir...\", \"Te voy a mostrar tres ideas que cambiarán tu forma de pensar sobre...\", etc.\n            21. CONCLUSION must include a clear summary: End with a recap of the main points covered - \"Hemos visto que...\", \"Los tres puntos clave que exploramos fueron...\", \"Para cerrar, recordemos que...\", etc. (\"En resumen\" is ONLY acceptable here in conclusions)\n            22. AVOID TYPICAL LLM WORDS: Never use overused AI-generated words like \"fundamental\", \"crucial\", \"clave\" (as adjective), \"esencial\", \"revelador\", \"fascinante\", \"delve into\", \"explore\", \"unpack\", \"dive deep\", \"robust\", \"compelling\", etc.\n            23. USE NATURAL LANGUAGE: Instead of LLM words, use conversational alternatives like \"importante\", \"interesante\", \"sorprendente\", \"nos ayuda a entender\", \"vamos a ver\", \"resulta que\", \"descubrimos que\", etc.\n            24. SOUND HUMAN: Write as if explaining to a friend over coffee, not as if generating academic content\n            \n            CRITICAL - MULTI-SPECIALIST INTEGRATION:\n            19. Weave in insights that could ONLY come from having multiple specialist perspectives\n            20. Include cross-disciplinary connections discovered during discussions\n            21. Incorporate domain-specific knowledge from ALL participating specialists\n            22. Show how different expert viewpoints enhance understanding of the topic\n            \n            23. Demonstrate the value of interdisciplinary analysis throughout\n            \n            \n            CRITICAL TECHNICAL REQUIREMENTS - THIS IS MANDATORY:\n            15. YOU MUST include comprehensive technical depth throughout the entire script\n            16. EXPLAIN IN DETAIL: experimental design, control groups, statistical methods used\n            17. INCLUDE SPECIFIC NUMBERS: sample sizes (e.g. \"54 participants\"), p-values, effect sizes, confidence intervals\n            18. DISCUSS METHODOLOGY THOROUGHLY: EEG analysis methods, data collection procedures, analysis pipelines\n            19. ADDRESS LIMITATIONS AND CONFOUNDS: what could bias results, alternative explanations\n            20. USE TECHNICAL TERMS CORRECTLY: neural connectivity, spectral analysis, statistical significance, but ALWAYS explain them\n            21. COMPARE TO OTHER STUDIES: how does this fit with existing research in the field\n            22. DISCUSS THEORETICAL IMPLICATIONS: what theories does this support or challenge\n            23. INCLUDE TECHNICAL DETAILS: electrode placement, signal processing, statistical tests used\n            24. EXPLAIN THE \"HOW\" not just the \"WHAT\": how did they measure cognitive load, how did they analyze connectivity\n            25. DISCUSS FUTURE RESEARCH: specific methodological improvements, follow-up studies needed\n            26. BE PRECISE WITH TERMINOLOGY: use exact scientific language for concepts\n            27. This should feel like a technical seminar for graduate students or researchers\n            \n            \n            \n        DURATION REQUIREMENT: EXACTLY 10 minutes of content (1400-1600 words) - THIS IS MANDATORY\n        \n        DEPTH GUIDANCE FOR 10 MINUTES:\n        \n            - Address 4-6 main concepts with moderate depth\n            - Include multiple examples and analogies per concept\n            - Provide relevant historical and theoretical context\n            - Explore implications and practical applications\n            - Include brief discussion of methodology if relevant\n            \n        \n        TECHNICAL CALCULATION:\n        - Target reading speed: ~150 words per minute\n        - Word range: 1400-1600 words\n        - If content is too short, EXPAND significantly with more detail and depth\n        - If too long, maintain quality but adjust information density\n        \n            \n            \n            LANGUAGE REQUIREMENTS FOR SPANISH:\n            \n            CRITICAL: AVOID ANGLICISMS whenever possible and use proper Spanish terms:\n            - Instead of \"link\" use \"enlace\" or \"vínculo\"\n            - Instead of \"feedback\" use \"retroalimentación\" or \"respuesta\"\n            - Insted of \"puzzle\" use \"rompecabezas\" or \"problema\"\n            - Instead of \"performance\" use \"rendimiento\" or \"desempeño\"\n            - Instead of \"input/output\" use \"entrada/salida\"\n            - Instead of \"update\" use \"actualizar\" or \"poner al día\"\n            \n            EXCEPTIONS - You CAN use anglicisms for:\n            1. Very new technical terms with no established translation (e.g., \"blockchain\", \"ChatGPT\")\n            2. Proper names of tools/companies (e.g., \"TensorFlow\", \"GitHub\", \"OpenAI\")\n            3. Widely adopted terms in scientific literature (e.g., \"machine learning\" vs \"aprendizaje automático\")\n            4. When the Spanish term is more confusing than helpful\n            \n            GENERAL RULES:\n            - Always prioritize natural Spanish expressions\n            - Use Spanish sentence structures and idioms\n            - Make it sound like a native Spanish speaker wrote it\n            - When you must use an anglicism, briefly explain it if needed\n            \n            \n            Language: Spanish\n            ",
      "expected_output": "Comprehensive educational script incorporating ALL conversation insights",
      "agent_role": "Educational Writer"
    },
    {
      "description": "\n            POST-PRODUCTION PHASE 3: FINAL VOICE OPTIMIZATION\n            \n            Transform the Educational Writer's script into a PERFECT voice-ready script.\n            \n            You are receiving the educational script that has been carefully crafted from all conversation insights\n            .\n            Your job is PURELY technical optimization for voice delivery.\n            \n            CRITICAL: Verify the content meets the 10-minute target (1400-1600 words). If it's too short, EXPAND it significantly.\n            CRITICAL: Ensure technical level is technical - include deep technical analysis.\n            \n            MANDATORY VOICE OPTIMIZATION REQUIREMENTS:\n            1. Create a SINGLE, CONTINUOUS text ready for a voice actor to read\n            2. Markdown formatting, but NO headers, NO bullet points, NO lists\n            3. Convert ALL content into natural, flowing sentences\n            4. Replace any remaining bullet points with complete sentences\n            5. Ensure PERFECT flow from sentence to sentence\n            6. Remove formatting marks: #, -, •, etc for titles and subtitles, but keep for bold and italic text\n            7. Make sure sentences are not too long or complex for voice delivery\n            8. Write naturally in Spanish without academic formalities\n            9. Remove any remaining conversational artifacts (\"como mencionamos antes\", \"en nuestra discusión\")\n            10. Ensure seamless transitions between concepts\n            11. Maintain the conversational richness but in a single educator voice\n            12. Read the text mentally to ensure it sounds natural when spoken\n            13. Ensure proper pronunciation flow for difficult technical terms\n            14. Remove any repetitive content that may have emerged from multiple discussions\n            15. Maintain the depth gained from agent conversations while ensuring clarity\n            16. Perfect pacing for natural speech rhythm\n            17. Eliminate any phrases that sound like committee work or group consensus\n            18. Make it sound like ONE expert who has deeply understood the topic\n            19. Ensure technical accuracy while maintaining conversational flow\n            20. Optimize for voice actor performance and listener engagement\n            21. This should sound like ONE VOICE teaching, not a summary of multiple voices\n            22. Avoid words that could make this sound like written by an LLM, like not often used words: \"fascinante\", \"delve\", \"revelador\"\n            23. CRITICAL INTRODUCTION VERIFICATION:\n                a) MUST start with a catchy hook (question, surprising fact, intriguing statement)\n                b) NEVER start with \"En resumen\", \"Hoy vamos a hablar de\", \"Este es un resumen de\"\n                c) The title/topic should be mentioned AFTER the hook, integrated naturally\n                d) If the script starts with \"En resumen\" or similar, REWRITE the entire introduction\n            24. DO NOT add new content - only optimize existing content for voice delivery\n            25. DO NOT change the educational message - only improve its delivery\n            \n            CRITICAL DIDACTIC STRUCTURE VERIFICATION:\n            26. VERIFY INTRODUCTION includes preview/roadmap: Ensure there's a clear \"what you'll learn\" section early in the script (AFTER the hook and title mention)\n            27. VERIFY CONCLUSION includes summary: Ensure there's a clear recap of main points at the end (\"En resumen\" is ONLY acceptable in conclusions)\n            28. REMOVE LLM WORDS: Replace any remaining \"fundamental\", \"crucial\", \"clave\" (adjective), \"esencial\", \"revelador\", \"fascinante\", \"compelling\", \"robust\", etc. with natural alternatives\n            29. HUMAN CONVERSATION: Ensure the entire script sounds like a knowledgeable person explaining something interesting, not AI-generated content\n            30. NATURAL FLOW: Check that didactic elements (preview, summary) flow naturally within the content, not as forced additions\n            31. HOOK QUALITY CHECK: The opening sentence should immediately grab attention - if it doesn't, rewrite it\n            \n\n            \n            LANGUAGE REQUIREMENTS FOR SPANISH:\n            \n            CRITICAL: AVOID ANGLICISMS whenever possible and use proper Spanish terms:\n            - Instead of \"link\" use \"enlace\" or \"vínculo\"\n            - Instead of \"feedback\" use \"retroalimentación\" or \"respuesta\"\n            - Insted of \"puzzle\" use \"rompecabezas\" or \"problema\"\n            - Instead of \"performance\" use \"rendimiento\" or \"desempeño\"\n            - Instead of \"input/output\" use \"entrada/salida\"\n            - Instead of \"update\" use \"actualizar\" or \"poner al día\"\n            \n            EXCEPTIONS - You CAN use anglicisms for:\n            1. Very new technical terms with no established translation (e.g., \"blockchain\", \"ChatGPT\")\n            2. Proper names of tools/companies (e.g., \"TensorFlow\", \"GitHub\", \"OpenAI\")\n            3. Widely adopted terms in scientific literature (e.g., \"machine learning\" vs \"aprendizaje automático\")\n            4. When the Spanish term is more confusing than helpful\n            \n            GENERAL RULES:\n            - Always prioritize natural Spanish expressions\n            - Use Spanish sentence structures and idioms\n            - Make it sound like a native Spanish speaker wrote it\n            - When you must use an anglicism, briefly explain it if needed\n            \n            \n            CRITICAL: This is the FINAL version that will be published. Make it PERFECT for voice delivery.\n            \n            Language: Spanish\n            ",
      "expected_output": "FINAL publication-ready voice script optimized for delivery (1400-1600 words)",
      "agent_role": "Voice Director"
    }
  ]
}