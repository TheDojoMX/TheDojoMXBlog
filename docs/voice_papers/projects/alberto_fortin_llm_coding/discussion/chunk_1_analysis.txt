Section: Section 1
Characters: 9691
==================================================
• Título: "After months of coding with LLMs, I'm going back to using my brain".  
• TLDR: LLMs funcionan adecuadamente para tareas de codificación, pero a gran escala producen códigos desorganizados.  
• El autor necesitaba construir una nueva infraestructura para su SaaS debido a que el combo PHP+MySQL ya no cumplía con los requisitos.  
• Se eligieron las tecnologías Go y Clickhouse para la nueva infraestructura.  
• El autor actuó inicialmente como gestor de productos, consultando a Claude sobre las mejores prácticas, realizando investigaciones independientes y generando un plan a partir de múltiples intercambios.  
• Se generó un archivo markdown detallando: la infraestructura existente, la infraestructura deseada, los objetivos y las razones para el cambio.  
• Se usó Cursor Notepads para alimentar a un LLM con prompts; el LLM generaba código en base a los inputs.  
• La metodología consistió en:  
  – Ingresar mensajes y contextos al LLM.  
  – Recibir código generado por LLM.  
  – Construir y probar el código resultante.  
• Se priorizó la velocidad de implementación sobre la limpieza del código, debido a la demanda de clientes que necesitaban datos específicos y al hecho de que potenciales clientes aguardaban el lanzamiento para adquirir un plan.  
• Datos de experiencia: El autor tiene 15 años de experiencia en ingeniería de software y estudió C++ y Java.  
• Problemas identificados en el código generado:  
  – Dos archivos de servicio en el mismo directorio con nombres similares pero métodos diferentes.  
  – Inconsistencias en nombres de métodos y propiedades: por ejemplo, uno de los archivos usa "WebAPIprovider" y otro "webApi" para el mismo parámetro.  
  – Múltiples declaraciones del mismo método en diferentes archivos.  
  – Inconsistencias en la forma de llamar y obtener archivos de configuración.  
• Se compara la situación con tener a 10 desarrolladores de nivel junior-mediano trabajando simultáneamente sin acceso a Git y sin coordinación.  
• Con el tiempo, surgieron errores recurrentes:  
  – Se recibían mensajes de error que, al ser ingresados nuevamente al LLM, producían correcciones que a su vez ocasionaban otros errores.  
  – La capacidad del LLM para solucionar problemas detallados disminuía al incrementarse la complejidad.  
• El autor comenzó a revisar el código generado de manera manual ("coding review") para entenderlo y corregir inconsistencias.  
• Se inició un proceso de aprendizaje sobre Go y Clickhouse mediante:  
  – Lectura de documentación y artículos.  
  – Visualización de videos de YouTube (por ejemplo, acerca de Clickhouse).  
  – Realización de preguntas detalladas a Claude y cuestionamiento de sus respuestas.  
• El cambio de enfoque incluyó:  
  – Tomarse el tiempo para revisar y reescribir partes del código que causaban mayor incomodidad.  
  – Utilizar LLMs solo para tareas sencillas, como:  
   • Renombrar parámetros en el código.  
   • Convertir pseudocódigo al equivalente en Go.  
• Se enfatiza que el autor ahora planifica funciones y características usando papel y lápiz antes de utilizar LLMs, reservando al LLM el papel de asistente y verificador.  
• Se manifiesta preocupación por:  
  – La pérdida de agilidad mental y la capacidad de planificar y escribir código organizado al depender excesivamente del LLM.  
  – El riesgo que enfrentan las personas sin conocimientos de programación al usar herramientas de IA para codificar ("vibe coding") y la dificultad de lidiar con errores y código confuso.  
• El autor describe la experiencia de codificar con Cursor y LLMs para usuarios sin conocimientos:  
  – Se enfrentan a largos fragmentos de código sin comprensión, errores recurrentes y soluciones que complican aún más el sistema.  
• Se recalcan limitaciones técnicas de los LLMs actuales en la generación de consultas complejas, por ejemplo:  
  – No se logra generar una consulta en Clickhouse para tablas con más de 100 millones de filas en un servidor con RAM limitada, aun cuando se suministran el esquema SQL y la documentación correspondiente.  
  – Se mencionan modelos específicos: Gemini, o4-mini-high, o3 y Sonnet 3.7, indicando que ninguno resuelve el problema sin generar errores.  
• Se destaca la inconsistencia en el rendimiento del LLM:  
  – Incluso con un flujo de trabajo supuestamente perfecto, el resultado no se mantiene estable y se interrumpe ante cambios o requisitos ligeramente distintos.  
• El autor expresa que, a pesar de la existencia de flujos de trabajo recomendados por expertos o influenciadores, ciertas tareas aún quedan fuera del alcance de la IA.  
• Se menciona el conflicto entre la velocidad ofrecida por la IA y la necesidad de revisar minuciosamente el código para obtener resultados consistentes y funcionales.  
• Se hace referencia a la presencia y promoción de herramientas y técnicas (como modelos o "reglas de Cursor" y un "flujo de trabajo de 15 pasos" encontrado en Reddit) que, según el autor, aunque probadas, no resuelven todos los desafíos.  
• El autor adopta un “punto medio”:  
  – Reduce drásticamente el uso de IA para tareas creativas o de generación de código complejo.  
  – Emplea la IA para tareas sencillas y de verificación.  
  – Se fundamenta en su experiencia y habilidades para escribir y organizar el código.  
• Se expresa entusiasmo por la tecnología, pero se advierte que la dependencia excesiva en la IA puede afectar negativamente la capacidad de aprendizaje y el desarrollo de habilidades de programación.  
• Se enfatiza que, aunque la tecnología puede parecer avanzada y prometedora, aún presenta limitaciones claras en consistencia, rendimiento y resolución de problemas complejos.  
• Se usan términos y referencias específicas:  
  – "Cursor" para el sistema o herramienta con el que se interactúa.  
  – "Claude", "Gemini", "o4-mini-high", "o3" y "Sonnet 3.7" como ejemplos de modelos de lenguaje.  
• Se menciona el impacto económico: cada día que el sistema no está listo, se pierden ingresos debido a clientes potenciales en espera de la implementación.  
• Se hace una comparación final:  
  – La situación se asemeja a elegir entre caminar (método tradicional, planificar manualmente) o usar una “nave espacial” (IA rápida pero con controles confusos y resultados inestables).  
• Se critica la promoción de benchmarks e influenciadores que venden la idea de la IA como una solución sin problemas frente a la realidad de errores y complejidades en su uso.