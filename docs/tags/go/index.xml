<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on The Dojo MX Blog</title><link>https://blog.thedojo.mx/tags/go/</link><description>Recent content in Go on The Dojo MX Blog</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Mon, 17 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.thedojo.mx/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Instrumentando microservicios en Go con Gin y AWS X-Ray</title><link>https://blog.thedojo.mx/2023/04/17/instrumentando-microservicios-en-go-con-gin-y-aws-x-ray/</link><pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2023/04/17/instrumentando-microservicios-en-go-con-gin-y-aws-x-ray/</guid><description>En una arquitectura de microservicios, las operaciones muchas veces abarcan múltiples servicios y recursos tales como gateways, microservicios, balanceadores de carga, bases de datos entre otros. La naturaleza distribuida de los microservicios es lo que hace invaluable la instrumentazión de software.
Si nuestro código provee información de traceo para requests, y logs, podemos decir que está instrumentado y que podemos observar cómo se está desempeñando nuestro sistema.
La instrumentación de servicios es especialmente útil para identificar y resolver problemas de rendimiento y errores.</description></item><item><title>Formas de hacer una API con Go</title><link>https://blog.thedojo.mx/2020/09/20/formas-de-hacer-una-api-con-go/</link><pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2020/09/20/formas-de-hacer-una-api-con-go/</guid><description>Go es uno de los lenguajes modernos más usados. Ya hablamos de por qué deberías aprenderlo.
Ahora hablemos de un caso de uso práctico: úsalo para crear una API HTTP. En este artículo nos enfocaremos en la parte de comunicación HTTP y la generación de respuestas adecuadas.
La funcionalidad básica de tu API puede o no adaptarse completamente a Go (no es es tan fácil de escribir como un lenguaje dinámico como Python), pero definitivamente es un lenguaje excelente para crear interfaces de comunicación web, debido a su alto rendimiento y eficiencia.</description></item><item><title>¿Por qué deberías aprender Go?</title><link>https://blog.thedojo.mx/2019/09/01/por-qu%C3%A9-deber%C3%ADas-aprender-go/</link><pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/09/01/por-qu%C3%A9-deber%C3%ADas-aprender-go/</guid><description>Go es eficiente, escalable y productivo. - Rob Pike
Go es un lenguaje popular por los rumores que hay acerca de él, como que es el lenguaje que va a matar a C, o que es muy muy rápido y poderoso. En este artículo vamos a hablar de qué cosas son ciertas y en qué casos te conviene aprender Go.
Empecemos hablando de cómo y por qué nació.
Historia de Go Go fue diseñado por Google para resolver sus problemas, y Google tiene grandes problemas.</description></item><item><title>La diferencia entre concurrencia y paralelismo</title><link>https://blog.thedojo.mx/2019/04/17/la-diferencia-entre-concurrencia-y-paralelismo/</link><pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.thedojo.mx/2019/04/17/la-diferencia-entre-concurrencia-y-paralelismo/</guid><description>Los términos concurrencia y paralelismo siempre han sido relevantes en el entorno de la computación y desarrollo de software. Hablemos de la diferencia entre ellos y cómo podemos aplicarlos en nuestros programas. Son conceptos relacionados, pero decir que uno es el otro es como decir que las naranjas y manzanas son iguales.
Empecemos por el concepto más sencillo: el paralelismo.
Paralelismo Se refiere a la ejecución simultánea de varios procesos computacionales.</description></item></channel></rss>