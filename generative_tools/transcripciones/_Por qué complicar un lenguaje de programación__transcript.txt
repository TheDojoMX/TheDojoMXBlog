Yo creo que, digo, eso ya es muy a título personal, pero yo creo que, efectivamente, yo creo que no importa por más que trates de que según esto meter mecanismos y medidas en un lenguaje para tratar de proteger al programador, el programador siempre va a encontrar, así como el usuario final, el programador siempre va a encontrar maneras de hacer porquerías y de encontrar la manera de cómo hacer que el sistema truene y cómo hacer cosas que no se entiendan, etcétera. Entonces, yo creo que, en cierta manera, es a veces contraproducente querer meter a veces tantas cosas en un lenguaje como para tratar de pensar de que quien lo está, porque quien lo está usando es alguien que no sabe cómo programar. Y él lo comenta, él lo comentó en la conferencia, dice, o sea, y entonces dice, eso mete muchas complicaciones, hace muy complejo el lenguaje, ese es su comentario, se hace muy complejo. Entonces, yo estoy partiendo de que quien lo va a usar. Bueno, dice, y la otra opción es enseñarle a la persona. O sea, cómo yo le enseño a alguien o cómo puedo ayudar a alguien para que tenga cierto nivel para que lo use. Y mejor parto de esa situación donde me voy a tomar el tiempo, el esfuerzo para preparar a alguien. Y el lenguaje no parte de que la persona va a hacer tonterías. Y eso hace que el lenguaje sea más simple, que sea mucho más simple, mucho más sencillo. Eso es lo que él comenta. Entonces, ese es, digamos, como su primer elemento de que él considera de que no encontró en otros lenguajes. Otro, pues, ya son más técnicos desde que tiene que ver, no tiene que tener Garbage Collector. O sea, ese overhead justamente de tener un colector de basura o del Runtime, etcétera. O sea, que realmente sí debe ser extremadamente eficiente. Y por otra parte, lo que comentaba al principio, de que sea sencillo. Digamos que esos son como los dos grandes puntos que menciona él, como ejes para el diseño de su lenguaje de programación.